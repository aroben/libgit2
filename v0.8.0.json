{"globals":{"GIT_IDXENTRY_VALID":{"value":"(0x8000)","file":"index.h","line":44},"GIT_EOSERR":{"value":"(GIT_ERROR - 4)","file":"common.h","line":107},"GIT_ENOTFOUND":{"value":"(GIT_ERROR - 2)","file":"common.h","line":101},"GIT_SORT_TIME":{"value":"(1 << 1)","file":"revwalk.h","line":60},"GIT_SORT_NONE":{"value":"(0)","file":"revwalk.h","line":46},"GIT_IDXENTRY_STAGESHIFT":{"value":"12","file":"index.h","line":45},"GIT_EFLOCKFAIL":{"value":"(GIT_ERROR - 11)","file":"common.h","line":128},"GIT_ENOTAREPO":{"value":"(GIT_ERROR - 7)","file":"common.h","line":116},"GIT_SUCCESS":{"value":"0","file":"common.h","line":87},"GIT_OID_RAWSZ":{"value":"20","file":"oid.h","line":41},"GIT_IDXENTRY_STAGEMASK":{"value":"(0x3000)","file":"index.h","line":42},"GIT_SORT_REVERSE":{"value":"(1 << 2)","file":"revwalk.h","line":67},"GIT_EZLIB":{"value":"(GIT_ERROR - 12)","file":"common.h","line":131},"GIT_EPACKCORRUPTED":{"value":"(GIT_ERROR - 10)","file":"common.h","line":125},"GIT_EINVALIDTYPE":{"value":"(GIT_ERROR - 8)","file":"common.h","line":119},"GIT_EOBJTYPE":{"value":"(GIT_ERROR - 5)","file":"common.h","line":110},"GIT_OID_HEXSZ":{"value":"(GIT_OID_RAWSZ * 2)","file":"oid.h","line":44},"GIT_IDXENTRY_EXTENDED":{"value":"(0x4000)","file":"index.h","line":43},"GIT_EINVALIDPATH":{"value":"(GIT_ERROR - 19)","file":"common.h","line":152},"GIT_EPACKEDREFSCORRUPTED":{"value":"(GIT_ERROR - 18)","file":"common.h","line":149},"GIT_EBUSY":{"value":"(GIT_ERROR - 13)","file":"common.h","line":134},"GIT_EOBJCORRUPTED":{"value":"(GIT_ERROR - 6)","file":"common.h","line":113},"GIT_ENOTOID":{"value":"(GIT_ERROR - 1)","file":"common.h","line":98},"GIT_SORT_TOPOLOGICAL":{"value":"(1 << 0)","file":"revwalk.h","line":53},"GIT_HAS_PTHREAD":{"value":"1","file":"thread-utils.h","line":35},"GIT_EREFCORRUPTED":{"value":"(GIT_ERROR - 16)","file":"common.h","line":143},"GIT_ENOMEM":{"value":"(GIT_ERROR - 3)","file":"common.h","line":104},"GIT_HAS_TLS":{"value":"1","file":"thread-utils.h","line":34},"GIT_IDXENTRY_NAMEMASK":{"value":"(0x0fff)","file":"index.h","line":41},"GIT_EINVALIDREFSTATE":{"value":"(GIT_ERROR - 21)","file":"common.h","line":158},"GIT_ETOONESTEDSYMREF":{"value":"(GIT_ERROR - 17)","file":"common.h","line":146},"GIT_EINVALIDREFNAME":{"value":"(GIT_ERROR - 15)","file":"common.h","line":140},"GIT_ERROR":{"value":"-1","file":"common.h","line":95},"GIT_EREVWALKOVER":{"value":"(GIT_ERROR - 20)","file":"common.h","line":155},"GIT_EBAREINDEX":{"value":"(GIT_ERROR - 14)","file":"common.h","line":137},"GIT_EMISSINGOBJDATA":{"value":"(GIT_ERROR - 9)","file":"common.h","line":122}},"groups":[["blob",["git_blob_lookup","git_blob_new","git_blob_rawcontent","git_blob_rawsize","git_blob_set_rawcontent","git_blob_set_rawcontent_fromfile","git_blob_writefile"]],["commit",["git_commit_add_parent","git_commit_author","git_commit_committer","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_new","git_commit_parent","git_commit_parentcount","git_commit_set_author","git_commit_set_committer","git_commit_set_message","git_commit_set_tree","git_commit_time","git_commit_time_offset","git_commit_tree"]],["errors",["git_strerror"]],["index",["git_index_add","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_insert","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write"]],["object",["git_object__size","git_object_close","git_object_id","git_object_lookup","git_object_new","git_object_owner","git_object_type","git_object_typeisloose","git_object_write"]],["odb",["git_odb_add_alternate","git_odb_add_backend","git_odb_backend_loose","git_odb_backend_pack","git_odb_backend_sqlite","git_odb_close","git_odb_exists","git_odb_new","git_odb_open","git_odb_read","git_odb_read_header","git_odb_write"]],["oid",["git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_to_string"]],["rawobj",["git_rawobj_close","git_rawobj_hash"]],["reference",["git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_packall","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]],["repository",["git_repository_database","git_repository_free","git_repository_index","git_repository_init","git_repository_open"]],["revwalk",["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]],["signature",["git_signature_dup","git_signature_free","git_signature_new"]],["tag",["git_tag_id","git_tag_lookup","git_tag_message","git_tag_name","git_tag_new","git_tag_set_message","git_tag_set_name","git_tag_set_tagger","git_tag_set_target","git_tag_tagger","git_tag_target","git_tag_type"]],["tree",["git_tree_add_entry","git_tree_clear_entries","git_tree_entry_attributes","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entry_id","git_tree_entry_name","git_tree_entry_set_attributes","git_tree_entry_set_id","git_tree_entry_set_name","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_new","git_tree_remove_entry_byindex","git_tree_remove_entry_byname"]]],"types":[["git_blob",{"used":{"returns":[],"needs":["git_blob_lookup","git_blob_new","git_blob_rawcontent","git_blob_rawsize","git_blob_set_rawcontent","git_blob_set_rawcontent_fromfile"]},"type":"struct","value":"git_blob","file":"types.h","line":111,"tdef":"typedef"}],["git_commit",{"used":{"returns":["git_commit_parent"],"needs":["git_commit_add_parent","git_commit_author","git_commit_committer","git_commit_id","git_commit_lookup","git_commit_message","git_commit_message_short","git_commit_new","git_commit_parent","git_commit_parentcount","git_commit_set_author","git_commit_set_committer","git_commit_set_message","git_commit_set_tree","git_commit_time","git_commit_time_offset","git_commit_tree","git_revwalk_hide","git_revwalk_next","git_revwalk_push"]},"type":"struct","value":"git_commit","file":"types.h","line":114,"tdef":"typedef"}],["git_index",{"used":{"returns":[],"needs":["git_index_add","git_index_clear","git_index_entrycount","git_index_find","git_index_free","git_index_get","git_index_insert","git_index_open_bare","git_index_open_inrepo","git_index_read","git_index_remove","git_index_write","git_repository_index"]},"type":"struct","value":"git_index","file":"types.h","line":123,"tdef":"typedef"}],["git_index_entry",{"used":{"returns":["git_index_get"],"needs":["git_index_insert"]},"lineto":72,"type":"struct","block":"git_index_time ctime;\ngit_index_time mtime;\n\nunsigned int dev;\nunsigned int ino;\nunsigned int mode;\nunsigned int uid;\nunsigned int gid;\ngit_off_t file_size;\n\ngit_oid oid;\n\nunsigned short flags;\nunsigned short flags_extended;\n\nchar *path;\n","value":null,"file":"index.h","line":55,"tdef":"typedef"}],["git_index_time",{"used":{"returns":[],"needs":[]},"lineto":52,"type":"struct","block":"git_time_t seconds;\n/* nsec should not be stored as time_t compatible */\nunsigned int nanoseconds;\n","value":null,"file":"index.h","line":48,"tdef":"typedef"}],["git_object",{"used":{"returns":["git_tag_target"],"needs":["git_object_close","git_object_id","git_object_lookup","git_object_new","git_object_owner","git_object_type","git_object_write","git_tag_set_target"]},"type":"struct","value":"git_object","file":"types.h","line":102,"tdef":"typedef"}],["git_odb",{"used":{"returns":["git_repository_database"],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_close","git_odb_exists","git_odb_new","git_odb_open","git_odb_read","git_odb_read_header","git_odb_write"]},"type":"struct","value":"git_odb","file":"types.h","line":90,"tdef":"typedef"}],["git_odb_backend",{"used":{"returns":[],"needs":["git_odb_add_alternate","git_odb_add_backend","git_odb_backend_loose","git_odb_backend_pack","git_odb_backend_sqlite"]},"type":"struct","value":"git_odb_backend","file":"types.h","line":93,"tdef":"typedef"}],["git_oid",{"used":{"returns":["git_commit_id","git_object_id","git_reference_oid","git_tag_id","git_tree_entry_id","git_tree_id"],"needs":["git_blob_lookup","git_blob_writefile","git_commit_lookup","git_object_lookup","git_odb_exists","git_odb_read","git_odb_read_header","git_odb_write","git_oid_allocfmt","git_oid_cmp","git_oid_cpy","git_oid_fmt","git_oid_mkraw","git_oid_mkstr","git_oid_pathfmt","git_oid_to_string","git_rawobj_hash","git_reference_create_oid","git_reference_set_oid","git_tag_lookup","git_tree_add_entry","git_tree_entry_set_id","git_tree_lookup"]},"lineto":50,"type":"struct","block":"/** raw binary formatted id */\nunsigned char id[GIT_OID_RAWSZ];\n","value":null,"file":"oid.h","line":47,"tdef":"typedef"}],["git_otype",{"used":{"returns":[],"needs":["git_object__size","git_object_lookup","git_object_new","git_object_typeisloose"]},"lineto":87,"type":"enum","block":"GIT_OBJ_ANY = -2,\t\t/**< Object can be any of the following */\nGIT_OBJ_BAD = -1,       /**< Object is invalid. */\nGIT_OBJ__EXT1 = 0,      /**< Reserved for future use. */\nGIT_OBJ_COMMIT = 1,     /**< A commit object. */\nGIT_OBJ_TREE = 2,       /**< A tree (directory listing) object. */\nGIT_OBJ_BLOB = 3,       /**< A file revision object. */\nGIT_OBJ_TAG = 4,        /**< An annotated tag object. */\nGIT_OBJ__EXT2 = 5,      /**< Reserved for future use. */\nGIT_OBJ_OFS_DELTA = 6,  /**< A delta, base is given by an offset. */\nGIT_OBJ_REF_DELTA = 7,  /**< A delta, base is given by object id. */\n","value":null,"file":"types.h","line":76,"tdef":"typedef"}],["git_rawobj",{"used":{"returns":[],"needs":["git_odb_read","git_odb_read_header","git_odb_write","git_rawobj_close","git_rawobj_hash"]},"lineto":112,"type":"struct","block":"void *data;          /**< Raw, decompressed object data. */\nsize_t len;          /**< Total number of bytes in data. */\ngit_otype type;      /**< Type of this object. */\n","value":null,"file":"odb.h","line":108,"tdef":"typedef"}],["git_reference",{"used":{"returns":[],"needs":["git_reference_create_oid","git_reference_create_symbolic","git_reference_delete","git_reference_lookup","git_reference_name","git_reference_oid","git_reference_owner","git_reference_rename","git_reference_resolve","git_reference_set_oid","git_reference_set_target","git_reference_target","git_reference_type"]},"type":"struct","value":"git_reference","file":"types.h","line":139,"tdef":"typedef"}],["git_repository",{"used":{"returns":["git_object_owner","git_reference_owner","git_revwalk_repository"],"needs":["git_blob_lookup","git_blob_new","git_blob_writefile","git_commit_lookup","git_commit_new","git_index_open_inrepo","git_object_lookup","git_object_new","git_reference_create_oid","git_reference_create_symbolic","git_reference_lookup","git_reference_packall","git_repository_database","git_repository_free","git_repository_index","git_repository_init","git_repository_open","git_revwalk_new","git_tag_lookup","git_tag_new","git_tree_lookup","git_tree_new"]},"type":"struct","value":"git_repository","file":"types.h","line":99,"tdef":"typedef"}],["git_revwalk",{"used":{"returns":[],"needs":["git_revwalk_free","git_revwalk_hide","git_revwalk_new","git_revwalk_next","git_revwalk_push","git_revwalk_repository","git_revwalk_reset","git_revwalk_sorting"]},"type":"struct","value":"git_revwalk","file":"types.h","line":105,"tdef":"typedef"}],["git_rtype",{"used":{"returns":[],"needs":[]},"lineto":148,"type":"enum","block":"GIT_REF_INVALID = 0, /** Invalid reference */\nGIT_REF_OID = 1, /** A reference which points at an object id */\nGIT_REF_SYMBOLIC = 2, /** A reference which points at another reference */\nGIT_REF_PACKED = 4,\nGIT_REF_HAS_PEEL = 8,\n","value":null,"file":"types.h","line":142,"tdef":"typedef"}],["git_signature",{"used":{"returns":["git_commit_author","git_commit_committer","git_signature_dup","git_signature_new","git_tag_tagger"],"needs":["git_commit_set_author","git_commit_set_committer","git_signature_dup","git_signature_free","git_tag_set_tagger"]},"lineto":136,"type":"struct","block":"char *name; /** full name of the author */\nchar *email; /** email of the author */\ngit_time when; /** time when the action happened */\n","value":null,"file":"types.h","line":132,"tdef":"typedef"}],["git_tag",{"used":{"returns":[],"needs":["git_tag_id","git_tag_lookup","git_tag_message","git_tag_name","git_tag_new","git_tag_set_message","git_tag_set_name","git_tag_set_tagger","git_tag_set_target","git_tag_tagger","git_tag_target","git_tag_type"]},"type":"struct","value":"git_tag","file":"types.h","line":108,"tdef":"typedef"}],["git_time",{"used":{"returns":[],"needs":[]},"lineto":129,"type":"struct","block":"time_t time; /** time in seconds from epoch */\nint offset; /** timezone offset, in minutes */\n","value":null,"file":"types.h","line":126,"tdef":"typedef"}],["git_tree",{"used":{"returns":["git_commit_tree"],"needs":["git_commit_set_tree","git_tree_add_entry","git_tree_clear_entries","git_tree_entry_byindex","git_tree_entry_byname","git_tree_entrycount","git_tree_id","git_tree_lookup","git_tree_new","git_tree_remove_entry_byindex","git_tree_remove_entry_byname"]},"type":"struct","value":"git_tree","file":"types.h","line":120,"tdef":"typedef"}],["git_tree_entry",{"used":{"returns":["git_tree_entry_byindex","git_tree_entry_byname"],"needs":["git_tree_add_entry","git_tree_entry_attributes","git_tree_entry_id","git_tree_entry_name","git_tree_entry_set_attributes","git_tree_entry_set_id","git_tree_entry_set_name"]},"type":"struct","value":"git_tree_entry","file":"types.h","line":117,"tdef":"typedef"}]],"prefix":"include/git2","functions":{"git_tag_set_target":{"lineto":120,"rawComments":"\n Set the target of a tag (i.e. the object that the tag points to)\n @param tag The tag to modify\n @param target the new tagged target\n\n","description":"Set the target of a tag (i.e. the object that the tag points to)","group":"tag","sig":"git_tag *::git_object *","return":{"type":"void","comment":""},"file":"tag.h","argline":"git_tag *tag, git_object *target","args":[{"type":"git_tag *","comment":"The tag to modify","name":"tag"},{"type":"git_object *","comment":"the new tagged target","name":"target"}],"comments":"","line":115},"git_tree_remove_entry_byname":{"lineto":175,"rawComments":"\n Remove an entry by its filename.\n\n This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()\n\n @param tree Tree where to remove the entry\n @param filename File name of the entry\n @return 0 on successful removal; GIT_ENOTFOUND if the entry wasn't found\n\n","description":"Remove an entry by its filename.","group":"tree","sig":"git_tree *::const char *","return":{"type":"int","comment":"0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"},"file":"tree.h","argline":"git_tree *tree, const char *filename","args":[{"type":"git_tree *","comment":"Tree where to remove the entry","name":"tree"},{"type":"const char *","comment":"File name of the entry","name":"filename"}],"comments":"This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()","line":165},"git_tree_entry_attributes":{"lineto":109,"rawComments":"\n Get the UNIX file attributes of a tree entry\n @param entry a tree entry\n @return attributes as an integer\n\n","description":"Get the UNIX file attributes of a tree entry","group":"tree","sig":"git_tree_entry *","return":{"type":"unsigned int","comment":"attributes as an integer"},"file":"tree.h","argline":"git_tree_entry *entry","args":[{"type":"git_tree_entry *","comment":"a tree entry","name":"entry"}],"comments":"","line":104},"git_tree_new":{"lineto":71,"rawComments":"\n Create a new in-memory git_tree.\n\n The tree object must be manually filled using\n setter methods before it can be written to its\n repository.\n\n @param tree pointer to the new tree\n @param repo The repository where the object will reside\n @return 0 on success; error code otherwise\n\n","description":"Create a new in-memory git_tree.","group":"tree","sig":"git_tree **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"tree.h","argline":"git_tree **tree, git_repository *repo","args":[{"type":"git_tree **","comment":"pointer to the new tree","name":"tree"},{"type":"git_repository *","comment":"The repository where the object will reside","name":"repo"}],"comments":"The tree object must be manually filled using\n setter methods before it can be written to its\n repository.","line":57},"git_commit_parentcount":{"lineto":136,"rawComments":"\n Get the number of parents of this commit\n\n @param commit a previously loaded commit.\n @return integer of count of parents\n\n","description":"Get the number of parents of this commit","group":"commit","sig":"git_commit *","return":{"type":"unsigned int","comment":"integer of count of parents"},"file":"commit.h","argline":"git_commit *commit","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"comments":"","line":130},"git_oid_mkstr":{"lineto":60,"rawComments":"\n Parse a hex formatted object id into a git_oid.\n @param out oid structure the result is written into.\n @param str input hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes).\n @return GIT_SUCCESS if valid; GIT_ENOTOID on failure.\n\n","description":"Parse a hex formatted object id into a git_oid.","group":"oid","sig":"git_oid *::const char *","return":{"type":"int","comment":"GIT_SUCCESS if valid; GIT_ENOTOID on failure."},"file":"oid.h","argline":"git_oid *out, const char *str","args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const char *","comment":"input hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (40 bytes).","name":"str"}],"comments":"","line":52},"git_reference_create_oid":{"lineto":86,"rawComments":"\n Create a new object id reference.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n @param ref_out Pointer to the newly created reference\n @param repo Repository where that reference will live\n @param name The name of the reference\n @param id The object id pointed to by the reference.\n @return 0 on success; error code otherwise\n\n","description":"Create a new object id reference.","group":"reference","sig":"git_reference **::git_repository *::const char *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"refs.h","argline":"git_reference **ref_out, git_repository *repo, const char *name, const git_oid *id","args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const git_oid *","comment":"The object id pointed to by the reference.","name":"id"}],"comments":"The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.","line":71},"git_tree_lookup":{"lineto":55,"rawComments":"\n Lookup a tree object from the repository.\n The generated tree object is owned by the revision\n repo and shall not be freed by the user.\n\n @param tree pointer to the looked up tree\n @param repo the repo to use when locating the tree.\n @param id identity of the tree to locate.\n @return 0 on success; error code otherwise\n\n","description":"Lookup a tree object from the repository. The generated tree object is owned by the revision repo and shall not be freed by the user.","group":"tree","sig":"git_tree **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"tree.h","argline":"git_tree **tree, git_repository *repo, const git_oid *id","args":[{"type":"git_tree **","comment":"pointer to the looked up tree","name":"tree"},{"type":"git_repository *","comment":"the repo to use when locating the tree.","name":"repo"},{"type":"const git_oid *","comment":"identity of the tree to locate.","name":"id"}],"comments":"","line":42},"git_tag_set_message":{"lineto":141,"rawComments":"\n Set the message of a tag\n @param tag The tag to modify\n @param message the new tagger for the tag\n\n","description":"Set the message of a tag","group":"tag","sig":"git_tag *::const char *","return":{"type":"void","comment":""},"file":"tag.h","argline":"git_tag *tag, const char *message","args":[{"type":"git_tag *","comment":"The tag to modify","name":"tag"},{"type":"const char *","comment":"the new tagger for the tag","name":"message"}],"comments":"","line":136},"git_tag_set_tagger":{"lineto":134,"rawComments":"\n Set the tagger of a tag\n @param tag The tag to modify\n @param tagger_sig signature of the tagging action\n\n","description":"Set the tagger of a tag","group":"tag","sig":"git_tag *::const git_signature *","return":{"type":"void","comment":""},"file":"tag.h","argline":"git_tag *tag, const git_signature *tagger_sig","args":[{"type":"git_tag *","comment":"The tag to modify","name":"tag"},{"type":"const git_signature *","comment":"signature of the tagging action","name":"tagger_sig"}],"comments":"","line":129},"git_odb_open":{"lineto":71,"rawComments":"\n Create a new object database and automatically add\n the two default backends:\n\n\t- git_odb_backend_loose: read and write loose object files\n\t\tfrom disk, assuming `objects_dir` as the Objects folder\n\n\t- git_odb_backend_pack: read objects from packfiles,\n\t\tassuming `objects_dir` as the Objects folder which\n\t\tcontains a 'pack/' folder with the corresponding data\n\n @param out location to store the database pointer, if opened.\n            Set to NULL if the open failed.\n @param objects_dir path of the backends' \"objects\" directory.\n @return GIT_SUCCESS if the database opened; otherwise an error\n         code describing why the open was not possible.\n\n","description":"Create a new object database and automatically add the two default backends:","group":"odb","sig":"git_odb **::const char *","return":{"type":"int","comment":"GIT_SUCCESS if the database opened; otherwise an error          code describing why the open was not possible."},"file":"odb.h","argline":"git_odb **out, const char *objects_dir","args":[{"type":"git_odb **","comment":"location to store the database pointer, if opened.             Set to NULL if the open failed.","name":"out"},{"type":"const char *","comment":"path of the backends' \"objects\" directory.","name":"objects_dir"}],"comments":"- git_odb_backend_loose: read and write loose object files\n\t\tfrom disk, assuming `objects_dir` as the Objects folder\n\n\t- git_odb_backend_pack: read objects from packfiles,\n\t\tassuming `objects_dir` as the Objects folder which\n\t\tcontains a 'pack/' folder with the corresponding data","line":54},"git_reference_set_target":{"lineto":162,"rawComments":"\n Set the symbolic target of a reference.\n\n The reference must be a symbolic reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.\n\n @param ref The reference\n @param target The new target for the reference\n @return 0 on success; error code otherwise\n\n","description":"Set the symbolic target of a reference.","group":"reference","sig":"git_reference *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"refs.h","argline":"git_reference *ref, const char *target","args":[{"type":"git_reference *","comment":"The reference","name":"ref"},{"type":"const char *","comment":"The new target for the reference","name":"target"}],"comments":"The reference must be a symbolic reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.","line":149},"git_commit_message":{"lineto":93,"rawComments":"\n Get the full message of a commit.\n @param commit a previously loaded commit.\n @return the message of a commit\n\n","description":"Get the full message of a commit.","group":"commit","sig":"git_commit *","return":{"type":"const char *","comment":"the message of a commit"},"file":"commit.h","argline":"git_commit *commit","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"comments":"","line":88},"git_tree_entry_set_attributes":{"lineto":218,"rawComments":"\n Change the attributes of a tree entry.\n\n This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param entry Entry object which will be modified\n @param oid new attributes for the entry\n\n","description":"Change the attributes of a tree entry.","group":"tree","sig":"git_tree_entry *::int","return":{"type":"void","comment":""},"file":"tree.h","argline":"git_tree_entry *entry, int attr","args":[{"type":"git_tree_entry *","comment":"Entry object which will be modified","name":"entry"},{"type":"int","comment":"","name":"attr"}],"comments":"This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param oid new attributes for the entry","line":209},"git_rawobj_hash":{"lineto":186,"rawComments":"\n Determine the object-ID (sha1 hash) of the given git_rawobj.\n\n The input obj must be a valid loose object type and the data\n pointer must not be NULL, unless the len field is also zero.\n\n @param id the resulting object-ID.\n @param obj the object whose hash is to be determined.\n @return\n - GIT_SUCCESS if the object-ID was correctly determined.\n - GIT_ERROR if the given object is malformed.\n\n","description":"Determine the object-ID (sha1 hash) of the given git_rawobj.","group":"rawobj","sig":"git_oid *::git_rawobj *","return":{"type":"int","comment":""},"file":"odb.h","argline":"git_oid *id, git_rawobj *obj","args":[{"type":"git_oid *","comment":"the resulting object-ID.","name":"id"},{"type":"git_rawobj *","comment":"the object whose hash is to be determined.","name":"obj"}],"comments":"The input obj must be a valid loose object type and the data\n pointer must not be NULL, unless the len field is also zero.\n\n @return\n - GIT_SUCCESS if the object-ID was correctly determined.\n - GIT_ERROR if the given object is malformed.","line":174},"git_commit_time_offset":{"lineto":107,"rawComments":"\n Get the commit timezone offset (i.e. committer's preferred timezone) of a commit.\n @param commit a previously loaded commit.\n @return positive or negative timezone offset, in minutes from UTC\n\n","description":"Get the commit timezone offset (i.e. committer's preferred timezone) of a commit.","group":"commit","sig":"git_commit *","return":{"type":"int","comment":"positive or negative timezone offset, in minutes from UTC"},"file":"commit.h","argline":"git_commit *commit","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"comments":"","line":102},"git_revwalk_free":{"lineto":123,"rawComments":"\n Free a revwalk previously allocated.\n @param walk traversal handle to close.  If NULL nothing occurs.\n\n","description":"Free a revwalk previously allocated.","group":"revwalk","sig":"git_revwalk *","return":{"type":"void","comment":""},"file":"revwalk.h","argline":"git_revwalk *walk","args":[{"type":"git_revwalk *","comment":"traversal handle to close.  If NULL nothing occurs.","name":"walk"}],"comments":"","line":119},"git_commit_set_tree":{"lineto":180,"rawComments":"\n Set the tree which is pointed to by a commit\n @param commit the commit object\n @param tree the new tree\n\n","description":"Set the tree which is pointed to by a commit","group":"commit","sig":"git_commit *::git_tree *","return":{"type":"void","comment":""},"file":"commit.h","argline":"git_commit *commit, git_tree *tree","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"git_tree *","comment":"the new tree","name":"tree"}],"comments":"","line":175},"git_revwalk_new":{"lineto":76,"rawComments":"\n Allocate a new revision walker to iterate through a repo.\n\n @param walker pointer to the new revision walker\n @param repo the repo to walk through\n @return 0 on success; error code otherwise\n\n","description":"Allocate a new revision walker to iterate through a repo.","group":"revwalk","sig":"git_revwalk **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"revwalk.h","argline":"git_revwalk **walker, git_repository *repo","args":[{"type":"git_revwalk **","comment":"pointer to the new revision walker","name":"walker"},{"type":"git_repository *","comment":"the repo to walk through","name":"repo"}],"comments":"","line":69},"git_signature_new":{"lineto":50,"rawComments":"\n Create a new action signature. The signature must be freed\n manually or using git_signature_free\n\n @name name of the person\n @email email of the person\n @time time when the action happened\n @offset timezone offset in minutes for the time\n @return the new sig, NULl on out of memory\n\n","description":"Create a new action signature. The signature must be freed manually or using git_signature_free","group":"signature","sig":"const char *::const char *::time_t::int","return":{"type":"git_signature *","comment":"the new sig, NULl on out of memory"},"file":"signature.h","argline":"const char *name, const char *email, time_t time, int offset","args":[{"type":"const char *","comment":"","name":"name"},{"type":"const char *","comment":"","name":"email"},{"type":"time_t","comment":"","name":"time"},{"type":"int","comment":"","name":"offset"}],"comments":"@name name of the person\n @email email of the person\n @time time when the action happened\n @offset timezone offset in minutes for the time","line":40},"git_oid_cmp":{"lineto":133,"rawComments":"\n Compare two oid structures.\n @param a first oid structure.\n @param b second oid structure.\n @return <0, 0, >0 if a < b, a == b, a > b.\n\n","description":"Compare two oid structures.","group":"oid","sig":"const git_oid *::const git_oid *","return":{"type":"int","comment":"<0, 0, >0 if a < b, a == b, a > b."},"file":"oid.h","argline":"const git_oid *a, const git_oid *b","args":[{"type":"const git_oid *","comment":"first oid structure.","name":"a"},{"type":"const git_oid *","comment":"second oid structure.","name":"b"}],"comments":"","line":127},"git_signature_dup":{"lineto":59,"rawComments":"\n Create a copy of an existing signature.\n\n All internal strings are also duplicated.\n @sig signature to duplicated\n @return a copy of sig, NULL on out of memory\n\n","description":"Create a copy of an existing signature.","group":"signature","sig":"const git_signature *","return":{"type":"git_signature *","comment":"a copy of sig, NULL on out of memory"},"file":"signature.h","argline":"const git_signature *sig","args":[{"type":"const git_signature *","comment":"","name":"sig"}],"comments":"All internal strings are also duplicated.\n @sig signature to duplicated","line":52},"git_repository_index":{"lineto":153,"rawComments":"\n Get the Index file of a Git repository\n\n This is a cheap operation; the index is only opened on the first call,\n and subsequent calls only retrieve the previous pointer.\n\n @param index Pointer where to store the index\n @param repo a repository object\n @return 0 on success; error code if the index could not be opened\n\n","description":"Get the Index file of a Git repository","group":"repository","sig":"git_index **::git_repository *","return":{"type":"int","comment":"0 on success; error code if the index could not be opened"},"file":"repository.h","argline":"git_index **index, git_repository *repo","args":[{"type":"git_index **","comment":"Pointer where to store the index","name":"index"},{"type":"git_repository *","comment":"a repository object","name":"repo"}],"comments":"This is a cheap operation; the index is only opened on the first call,\n and subsequent calls only retrieve the previous pointer.","line":143},"git_tag_name":{"lineto":99,"rawComments":"\n Get the name of a tag\n @param tag a previously loaded tag.\n @return name of the tag\n\n","description":"Get the name of a tag @param tag a previously loaded tag.","group":"tag","sig":"git_tag *","return":{"type":"const char *","comment":"name of the tag"},"file":"tag.h","argline":"git_tag *t","args":[{"type":"git_tag *","comment":"","name":"t"}],"comments":"","line":94},"git_blob_rawcontent":{"lineto":105,"rawComments":"\n Get a read-only buffer with the raw content of a blob.\n\n A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time (e.g. when changing the contents of the blob).\n\n @param blob pointer to the blob\n @return the pointer; NULL if the blob has no contents\n\n","description":"Get a read-only buffer with the raw content of a blob.","group":"blob","sig":"git_blob *","return":{"type":"const char *","comment":"the pointer; NULL if the blob has no contents"},"file":"blob.h","argline":"git_blob *blob","args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"}],"comments":"A pointer to the raw content of a blob is returned;\n this pointer is owned internally by the object and shall\n not be free'd. The pointer may be invalidated at a later\n time (e.g. when changing the contents of the blob).","line":94},"git_tree_add_entry":{"lineto":149,"rawComments":"\n Add a new entry to a tree and return the new entry.\n\n This will mark the tree as modified; the new entry will\n be written back to disk on the next git_object_write()\n\n @param entry_out Pointer to the entry that just got\n\tcreated. May be NULL if you are not interested on\n\tgetting the new entry\n @param tree Tree object to store the entry\n @iparam id OID for the tree entry\n @param filename Filename for the tree entry\n @param attributes UNIX file attributes for the entry\n @return 0 on success; otherwise error code\n\n","description":"Add a new entry to a tree and return the new entry.","group":"tree","sig":"git_tree_entry **::git_tree *::const git_oid *::const char *::int","return":{"type":"int","comment":"0 on success; otherwise error code"},"file":"tree.h","argline":"git_tree_entry **entry_out, git_tree *tree, const git_oid *id, const char *filename, int attributes","args":[{"type":"git_tree_entry **","comment":"Pointer to the entry that just got  created. May be NULL if you are not interested on  getting the new entry","name":"entry_out"},{"type":"git_tree *","comment":"Tree object to store the entry","name":"tree"},{"type":"const git_oid *","comment":"","name":"id"},{"type":"const char *","comment":"Filename for the tree entry","name":"filename"},{"type":"int","comment":"UNIX file attributes for the entry","name":"attributes"}],"comments":"This will mark the tree as modified; the new entry will\n be written back to disk on the next git_object_write()\n\n @iparam id OID for the tree entry","line":134},"git_object_typeisloose":{"lineto":179,"rawComments":"\n Determine if the given git_otype is a valid loose object type.\n\n @param type object type to test.\n @return true if the type represents a valid loose object type,\n false otherwise.\n\n","description":"Determine if the given git_otype is a valid loose object type.","group":"object","sig":"git_otype","return":{"type":"int","comment":"true if the type represents a valid loose object type,  false otherwise."},"file":"object.h","argline":"git_otype type","args":[{"type":"git_otype","comment":"object type to test.","name":"type"}],"comments":"","line":172},"git_revwalk_repository":{"lineto":132,"rawComments":"\n Return the repository on which this walker\n is operating.\n\n @param walk the revision walker\n @return the repository being walked\n\n","description":"Return the repository on which this walker is operating.","group":"revwalk","sig":"git_revwalk *","return":{"type":"git_repository *","comment":"the repository being walked"},"file":"revwalk.h","argline":"git_revwalk *walk","args":[{"type":"git_revwalk *","comment":"the revision walker","name":"walk"}],"comments":"","line":125},"git_tree_clear_entries":{"lineto":185,"rawComments":"\n Clear all the entries in a tree.\n\n This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write().\n\n @param tree Tree object whose entries are to be sorted\n\n","description":"Clear all the entries in a tree.","group":"tree","sig":"git_tree *","return":{"type":"void","comment":""},"file":"tree.h","argline":"git_tree *tree","args":[{"type":"git_tree *","comment":"Tree object whose entries are to be sorted","name":"tree"}],"comments":"This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write().","line":177},"git_reference_type":{"lineto":116,"rawComments":"\n Get the type of a reference\n\n Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)\n\n @param ref The reference\n @return the type\n\n","description":"Get the type of a reference","group":"reference","sig":"git_reference *","return":{"type":"git_rtype","comment":"the type"},"file":"refs.h","argline":"git_reference *ref","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"comments":"Either direct (GIT_REF_OID) or symbolic (GIT_REF_SYMBOLIC)","line":108},"git_odb_add_alternate":{"lineto":99,"rawComments":"\n Add a custom backend to an existing Object DB; this\n backend will work as an alternate.\n\n Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.\n\n Writing is disabled on alternate backends.\n\n Read <odb_backends.h> for more information.\n\n @param odb database to add the backend to\n @paramm backend pointer to a git_odb_backend instance\n @return 0 on sucess; error code otherwise\n\n","description":"Add a custom backend to an existing Object DB; this backend will work as an alternate.","group":"odb","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"file":"odb.h","argline":"git_odb *odb, git_odb_backend *backend, int priority","args":[{"type":"git_odb *","comment":"database to add the backend to","name":"odb"},{"type":"git_odb_backend *","comment":"","name":"backend"},{"type":"int","comment":"","name":"priority"}],"comments":"Alternate backends are always checked for objects *after*\n all the main backends have been exhausted.\n\n Writing is disabled on alternate backends.\n\n Read <odb_backends.h> for more information.\n\n @paramm backend pointer to a git_odb_backend instance","line":84},"git_revwalk_hide":{"lineto":98,"rawComments":"\n Mark a commit (and its ancestors) uninteresting for the output.\n @param walker the walker being used for the traversal.\n @param commit the commit that will be ignored during the traversal\n\n","description":"Mark a commit (and its ancestors) uninteresting for the output. @param walker the walker being used for the traversal.","group":"revwalk","sig":"git_revwalk *::git_commit *","return":{"type":"int","comment":""},"file":"revwalk.h","argline":"git_revwalk *walk, git_commit *commit","args":[{"type":"git_revwalk *","comment":"","name":"walk"},{"type":"git_commit *","comment":"the commit that will be ignored during the traversal","name":"commit"}],"comments":"","line":93},"git_reference_create_symbolic":{"lineto":69,"rawComments":"\n Create a new symbolic reference.\n\n The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.\n\n @param ref_out Pointer to the newly created reference\n @param repo Repository where that reference will live\n @param name The name of the reference\n @param target The target of the reference\n @return 0 on success; error code otherwise\n\n","description":"Create a new symbolic reference.","group":"reference","sig":"git_reference **::git_repository *::const char *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"refs.h","argline":"git_reference **ref_out, git_repository *repo, const char *name, const char *target","args":[{"type":"git_reference **","comment":"Pointer to the newly created reference","name":"ref_out"},{"type":"git_repository *","comment":"Repository where that reference will live","name":"repo"},{"type":"const char *","comment":"The name of the reference","name":"name"},{"type":"const char *","comment":"The target of the reference","name":"target"}],"comments":"The reference will be created in the repository and written\n to the disk.\n\n This reference is owned by the repository and shall not\n be free'd by the user.","line":54},"git_object_id":{"lineto":112,"rawComments":"\n Get the id (SHA1) of a repository object\n\n In-memory objects created by git_object_new() do not\n have a SHA1 ID until they are written on a repository.\n\n @param obj the repository object\n @return the SHA1 id\n\n","description":"Get the id (SHA1) of a repository object","group":"object","sig":"const git_object *","return":{"type":"const git_oid *","comment":"the SHA1 id"},"file":"object.h","argline":"const git_object *obj","args":[{"type":"const git_object *","comment":"the repository object","name":"obj"}],"comments":"In-memory objects created by git_object_new() do not\n have a SHA1 ID until they are written on a repository.","line":103},"git_object_lookup":{"lineto":58,"rawComments":"\n Lookup a reference to one of the objects in a repostory.\n\n The generated reference is owned by the repository and\n should not be freed by the user.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type.\n\n @param object pointer to the looked-up object\n @param repo the repository to look up the object\n @param id the unique identifier for the object\n @param type the type of the object\n @return a reference to the object\n\n","description":"Lookup a reference to one of the objects in a repostory.","group":"object","sig":"git_object **::git_repository *::const git_oid *::git_otype","return":{"type":"int","comment":"a reference to the object"},"file":"object.h","argline":"git_object **object, git_repository *repo, const git_oid *id, git_otype type","args":[{"type":"git_object **","comment":"pointer to the looked-up object","name":"object"},{"type":"git_repository *","comment":"the repository to look up the object","name":"repo"},{"type":"const git_oid *","comment":"the unique identifier for the object","name":"id"},{"type":"git_otype","comment":"the type of the object","name":"type"}],"comments":"The generated reference is owned by the repository and\n should not be freed by the user.\n\n The 'type' parameter must match the type of the object\n in the odb; the method will fail otherwise.\n The special value 'GIT_OBJ_ANY' may be passed to let\n the method guess the object's type.","line":41},"git_reference_oid":{"lineto":96,"rawComments":"\n Get the OID pointed to by a reference.\n\n Only available if the reference is direct (i.e. not symbolic)\n\n @param ref The reference\n @return a pointer to the oid if available, NULL otherwise\n\n","description":"Get the OID pointed to by a reference.","group":"reference","sig":"git_reference *","return":{"type":"const git_oid *","comment":"a pointer to the oid if available, NULL otherwise"},"file":"refs.h","argline":"git_reference *ref","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"comments":"Only available if the reference is direct (i.e. not symbolic)","line":88},"git_commit_set_committer":{"lineto":166,"rawComments":"\n Set the committer of a commit\n @param commit the commit object\n @param author_sig signature of the committer\n\n","description":"Set the committer of a commit @param author_sig signature of the committer","group":"commit","sig":"git_commit *::const git_signature *","return":{"type":"void","comment":""},"file":"commit.h","argline":"git_commit *commit, const git_signature *committer_sig","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"const git_signature *","comment":"","name":"committer_sig"}],"comments":"","line":161},"__attribute__":{"lineto":57,"rawComments":" Declare a public TLS symbol exported for application use. ","description":"Declare a public TLS symbol exported for application use.","sig":"","return":{"type":"","comment":""},"file":"common.h","argline":"(visibility(\"default\"))","args":[{"type":"","comment":"","name":"(visibility(\"default\"))"}],"comments":"","line":52},"git_commit_add_parent":{"lineto":152,"rawComments":"\n Add a new parent commit to an existing commit\n @param commit the commit object\n @param new_parent the new commit which will be a parent\n @return 0 on success; error code otherwise\n\n","description":"Add a new parent commit to an existing commit","group":"commit","sig":"git_commit *::git_commit *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"commit.h","argline":"git_commit *commit, git_commit *new_parent","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"git_commit *","comment":"the new commit which will be a parent","name":"new_parent"}],"comments":"","line":146},"git_repository_database":{"lineto":141,"rawComments":"\n Get the object database behind a Git repository\n\n @param repo a repository object\n @return a pointer to the object db\n\n","description":"Get the object database behind a Git repository","group":"repository","sig":"git_repository *","return":{"type":"git_odb *","comment":"a pointer to the object db"},"file":"repository.h","argline":"git_repository *repo","args":[{"type":"git_repository *","comment":"a repository object","name":"repo"}],"comments":"","line":135},"git_tree_entry_id":{"lineto":123,"rawComments":"\n Get the id of the object pointed by the entry\n @param entry a tree entry\n @return the oid of the object\n\n","description":"Get the id of the object pointed by the entry","group":"tree","sig":"git_tree_entry *","return":{"type":"const git_oid *","comment":"the oid of the object"},"file":"tree.h","argline":"git_tree_entry *entry","args":[{"type":"git_tree_entry *","comment":"a tree entry","name":"entry"}],"comments":"","line":118},"git_tree_entry_byname":{"lineto":94,"rawComments":"\n Lookup a tree entry by its filename\n @param tree a previously loaded tree.\n @param filename the filename of the desired entry\n @return the tree entry; NULL if not found\n\n","description":"Lookup a tree entry by its filename","group":"tree","sig":"git_tree *::const char *","return":{"type":"git_tree_entry *","comment":"the tree entry; NULL if not found"},"file":"tree.h","argline":"git_tree *tree, const char *filename","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"},{"type":"const char *","comment":"the filename of the desired entry","name":"filename"}],"comments":"","line":88},"git_odb_close":{"lineto":105,"rawComments":"\n Close an open object database.\n @param db database pointer to close.  If NULL no action is taken.\n\n","description":"Close an open object database.","group":"odb","sig":"git_odb *","return":{"type":"void","comment":""},"file":"odb.h","argline":"git_odb *db","args":[{"type":"git_odb *","comment":"database pointer to close.  If NULL no action is taken.","name":"db"}],"comments":"","line":101},"git_tag_id":{"lineto":78,"rawComments":"\n Get the id of a tag.\n @param tag a previously loaded tag.\n @return object identity for the tag.\n\n","description":"Get the id of a tag.","group":"tag","sig":"git_tag *","return":{"type":"const git_oid *","comment":"object identity for the tag."},"file":"tag.h","argline":"git_tag *tag","args":[{"type":"git_tag *","comment":"a previously loaded tag.","name":"tag"}],"comments":"","line":73},"git_reference_target":{"lineto":106,"rawComments":"\n Get full name to the reference pointed by this reference\n\n Only available if the reference is symbolic\n\n @param ref The reference\n @return a pointer to the name if available, NULL otherwise\n\n","description":"Get full name to the reference pointed by this reference","group":"reference","sig":"git_reference *","return":{"type":"const char *","comment":"a pointer to the name if available, NULL otherwise"},"file":"refs.h","argline":"git_reference *ref","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"comments":"Only available if the reference is symbolic","line":98},"git_odb_add_backend":{"lineto":82,"rawComments":"\n Add a custom backend to an existing Object DB\n\n Read <odb_backends.h> for more information.\n\n @param odb database to add the backend to\n @paramm backend pointer to a git_odb_backend instance\n @return 0 on sucess; error code otherwise\n\n","description":"Add a custom backend to an existing Object DB","group":"odb","sig":"git_odb *::git_odb_backend *::int","return":{"type":"int","comment":"0 on sucess; error code otherwise"},"file":"odb.h","argline":"git_odb *odb, git_odb_backend *backend, int priority","args":[{"type":"git_odb *","comment":"database to add the backend to","name":"odb"},{"type":"git_odb_backend *","comment":"","name":"backend"},{"type":"int","comment":"","name":"priority"}],"comments":"Read <odb_backends.h> for more information.\n\n @paramm backend pointer to a git_odb_backend instance","line":73},"git_index_insert":{"lineto":174,"rawComments":"\n Insert an entry into the index.\n A full copy (including the 'path' string) of the given\n 'source_entry' will be inserted on the index; if the index\n already contains an entry for the same path, the entry\n will be updated.\n\n @param index an existing index object\n @param source_entry new entry object\n @return 0 on success, otherwise an error code\n\n","description":"Insert an entry into the index. A full copy (including the 'path' string) of the given 'source_entry' will be inserted on the index; if the index already contains an entry for the same path, the entry will be updated.","group":"index","sig":"git_index *::const git_index_entry *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"file":"index.h","argline":"git_index *index, const git_index_entry *source_entry","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const git_index_entry *","comment":"new entry object","name":"source_entry"}],"comments":"","line":163},"git_blob_new":{"lineto":71,"rawComments":"\n Create a new in-memory git_blob.\n\n The blob object must be manually filled using\n the 'set_rawcontent' methods before it can\n be written back to disk.\n\n @param blob pointer to the new blob\n @param repo The repository where the object will reside\n @return 0 on success; error code otherwise\n\n","description":"Create a new in-memory git_blob.","group":"blob","sig":"git_blob **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"blob.h","argline":"git_blob **blob, git_repository *repo","args":[{"type":"git_blob **","comment":"pointer to the new blob","name":"blob"},{"type":"git_repository *","comment":"The repository where the object will reside","name":"repo"}],"comments":"The blob object must be manually filled using\n the 'set_rawcontent' methods before it can\n be written back to disk.","line":57},"git_object_type":{"lineto":120,"rawComments":"\n Get the object type of an object\n\n @param obj the repository object\n @return the object's type\n\n","description":"Get the object type of an object","group":"object","sig":"const git_object *","return":{"type":"git_otype","comment":"the object's type"},"file":"object.h","argline":"const git_object *obj","args":[{"type":"const git_object *","comment":"the repository object","name":"obj"}],"comments":"","line":114},"git_rawobj_close":{"lineto":197,"rawComments":"\n Release all memory used by the obj structure.\n\n As a result of this call, obj->data will be set to NULL.\n\n If obj->data is already NULL, nothing happens.\n\n @param obj object descriptor to free.\n\n","description":"Release all memory used by the obj structure.","group":"rawobj","sig":"git_rawobj *","return":{"type":"void","comment":""},"file":"odb.h","argline":"git_rawobj *obj","args":[{"type":"git_rawobj *","comment":"object descriptor to free.","name":"obj"}],"comments":"As a result of this call, obj->data will be set to NULL.\n\n If obj->data is already NULL, nothing happens.","line":188},"git_blob_set_rawcontent_fromfile":{"lineto":81,"rawComments":"\n Fill a blob with the contents inside\n the pointed file.\n\n @param blob pointer to the new blob\n @param filename name of the file to read\n @return 0 on success; error code otherwise\n\n","description":"Fill a blob with the contents inside the pointed file.","group":"blob","sig":"git_blob *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"blob.h","argline":"git_blob *blob, const char *filename","args":[{"type":"git_blob *","comment":"pointer to the new blob","name":"blob"},{"type":"const char *","comment":"name of the file to read","name":"filename"}],"comments":"","line":73},"git_index_add":{"lineto":152,"rawComments":"\n Add or update an index entry from a file in disk.\n\n @param index an existing index object\n @param path filename to add\n @param stage stage for the entry\n @return 0 on success, otherwise an error code\n\n","description":"Add or update an index entry from a file in disk.","group":"index","sig":"git_index *::const char *::int","return":{"type":"int","comment":"0 on success, otherwise an error code"},"file":"index.h","argline":"git_index *index, const char *path, int stage","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"filename to add","name":"path"},{"type":"int","comment":"stage for the entry","name":"stage"}],"comments":"","line":144},"git_odb_backend_sqlite":{"lineto":72,"rawComments":"","description":"","group":"odb","sig":"git_odb_backend **::const char *","return":{"type":"int","comment":""},"file":"odb_backend.h","argline":"git_odb_backend **backend_out, const char *sqlite_db","args":[{"type":"git_odb_backend **","comment":"","name":"backend_out"},{"type":"const char *","comment":"","name":"sqlite_db"}],"comments":"","line":72},"git_index_get":{"lineto":186,"rawComments":"\n Get a pointer to one of the entries in the index\n\n This entry can be modified, and the changes will be written\n back to disk on the next write() call.\n\n @param index an existing index object\n @param n the position of the entry\n @return a pointer to the entry; NULL if out of bounds\n\n","description":"Get a pointer to one of the entries in the index","group":"index","sig":"git_index *::int","return":{"type":"git_index_entry *","comment":"a pointer to the entry; NULL if out of bounds"},"file":"index.h","argline":"git_index *index, int n","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"int","comment":"the position of the entry","name":"n"}],"comments":"This entry can be modified, and the changes will be written\n back to disk on the next write() call.","line":176},"git_repository_free":{"lineto":162,"rawComments":"\n Free a previously allocated repository\n @param repo repository handle to close. If NULL nothing occurs.\n\n","description":"Free a previously allocated repository","group":"repository","sig":"git_repository *repo); GIT_EXTERN(void) git_repository_free__no_gc(git_repository *","return":{"type":"void","comment":""},"file":"repository.h","argline":"git_repository *repo); GIT_EXTERN(void) git_repository_free__no_gc(git_repository *repo","args":[{"type":"git_repository *repo); GIT_EXTERN(void) git_repository_free__no_gc(git_repository *","comment":"repository handle to close. If NULL nothing occurs.","name":"repo"}],"comments":"","line":155},"git_tag_new":{"lineto":71,"rawComments":"\n Create a new in-memory git_tag.\n\n The tag object must be manually filled using\n setter methods before it can be written to its\n repository.\n\n @param tag pointer to the new tag\n @param repo The repository where the object will reside\n @return 0 on success; error code otherwise\n\n","description":"Create a new in-memory git_tag.","group":"tag","sig":"git_tag **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"tag.h","argline":"git_tag **tag, git_repository *repo","args":[{"type":"git_tag **","comment":"pointer to the new tag","name":"tag"},{"type":"git_repository *","comment":"The repository where the object will reside","name":"repo"}],"comments":"The tag object must be manually filled using\n setter methods before it can be written to its\n repository.","line":57},"git_oid_cpy":{"lineto":125,"rawComments":"\n Copy an oid from one structure to another.\n @param out oid structure the result is written into.\n @param src oid structure to copy from.\n\n","description":"Copy an oid from one structure to another.","group":"oid","sig":"git_oid *::const git_oid *","return":{"type":"void","comment":""},"file":"oid.h","argline":"git_oid *out, const git_oid *src","args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const git_oid *","comment":"oid structure to copy from.","name":"src"}],"comments":"","line":120},"git_object_write":{"lineto":101,"rawComments":"\n Write back an object to disk.\n\n The object will be written to its corresponding\n repository.\n\n If the object has no changes since it was first\n read from the repository, no actions will take place.\n\n If the object has been modified since it was read from\n the repository, or it has been created from scratch\n in memory, it will be written to the repository and\n its SHA1 ID will be updated accordingly.\n\n @param object Git object to write back\n @return 0 on success; otherwise an error code\n\n","description":"Write back an object to disk.","group":"object","sig":"git_object *","return":{"type":"int","comment":"0 on success; otherwise an error code"},"file":"object.h","argline":"git_object *object","args":[{"type":"git_object *","comment":"Git object to write back","name":"object"}],"comments":"The object will be written to its corresponding\n repository.\n\n If the object has no changes since it was first\n read from the repository, no actions will take place.\n\n If the object has been modified since it was read from\n the repository, or it has been created from scratch\n in memory, it will be written to the repository and\n its SHA1 ID will be updated accordingly.","line":84},"git_index_open_inrepo":{"lineto":98,"rawComments":"\n Open the Index inside the git repository pointed\n by 'repo'.\n\n @param repo the git repo which owns the index\n @param index_path the path to the index file in disk\n @return 0 on success; error code otherwise\n\n","description":"Open the Index inside the git repository pointed by 'repo'.","group":"index","sig":"git_index **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"index.h","argline":"git_index **index, git_repository *repo","args":[{"type":"git_index **","comment":"","name":"index"},{"type":"git_repository *","comment":"the git repo which owns the index","name":"repo"}],"comments":"@param index_path the path to the index file in disk","line":90},"git_revwalk_next":{"lineto":108,"rawComments":"\n Get the next commit from the revision traversal.\n\n @param commit Pointer where to store the next commit\n @param walk the walker to pop the commit from.\n @return GIT_SUCCESS if the next commit was found;\n\tGIT_EREVWALKOVER if there are no commits left to iterate\n\n","description":"Get the next commit from the revision traversal.","group":"revwalk","sig":"git_commit **::git_revwalk *","return":{"type":"int","comment":"GIT_SUCCESS if the next commit was found;  GIT_EREVWALKOVER if there are no commits left to iterate"},"file":"revwalk.h","argline":"git_commit **commit, git_revwalk *walk","args":[{"type":"git_commit **","comment":"Pointer where to store the next commit","name":"commit"},{"type":"git_revwalk *","comment":"the walker to pop the commit from.","name":"walk"}],"comments":"","line":100},"git_repository_init":{"lineto":179,"rawComments":"\n Creates a new Git repository in the given folder.\n\n TODO:\n\t- Reinit the repository\n\t- Create config files\n\n @param repo_out pointer to the repo which will be created or reinitialized\n @param path the path to the repository\n @param is_bare if true, a Git repository without a working directory is created\n\t\tat the pointed path. If false, provided path will be considered as the working\n\t\tdirectory into which the .git directory will be created.\n\n @return 0 on success; error code otherwise\n\n","description":"Creates a new Git repository in the given folder.","group":"repository","sig":"git_repository **::const char *::unsigned","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"repository.h","argline":"git_repository **repo_out, const char *path, unsigned is_bare","args":[{"type":"git_repository **","comment":"pointer to the repo which will be created or reinitialized","name":"repo_out"},{"type":"const char *","comment":"the path to the repository","name":"path"},{"type":"unsigned","comment":"if true, a Git repository without a working directory is created   at the pointed path. If false, provided path will be considered as the working   directory into which the .git directory will be created.","name":"is_bare"}],"comments":"TODO:\n\t- Reinit the repository\n\t- Create config files","line":164},"git_index_clear":{"lineto":107,"rawComments":"\n Clear the contents (all the entries) of an index object.\n This clears the index object in memory; changes must be manually\n written to disk for them to take effect.\n\n @param index an existing index object\n\n","description":"Clear the contents (all the entries) of an index object. This clears the index object in memory; changes must be manually written to disk for them to take effect.","group":"index","sig":"git_index *","return":{"type":"void","comment":""},"file":"index.h","argline":"git_index *index","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"comments":"","line":100},"git_tree_entrycount":{"lineto":86,"rawComments":"\n Get the number of entries listed in a tree\n @param tree a previously loaded tree.\n @return the number of entries in the tree\n\n","description":"Get the number of entries listed in a tree","group":"tree","sig":"git_tree *","return":{"type":"size_t","comment":"the number of entries in the tree"},"file":"tree.h","argline":"git_tree *tree","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"}],"comments":"","line":81},"git_commit_time":{"lineto":100,"rawComments":"\n Get the commit time (i.e. committer time) of a commit.\n @param commit a previously loaded commit.\n @return the time of a commit\n\n","description":"Get the commit time (i.e. committer time) of a commit.","group":"commit","sig":"git_commit *","return":{"type":"time_t","comment":"the time of a commit"},"file":"commit.h","argline":"git_commit *commit","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"comments":"","line":95},"git_index_free":{"lineto":114,"rawComments":"\n Free an existing index object.\n\n @param index an existing index object\n\n","description":"Free an existing index object.","group":"index","sig":"git_index *","return":{"type":"void","comment":""},"file":"index.h","argline":"git_index *index","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"comments":"","line":109},"git_index_write":{"lineto":132,"rawComments":"\n Write an existing index object from memory back to disk\n using an atomic file lock.\n\n @param index an existing index object\n @return 0 on success, otherwise an error code\n\n","description":"Write an existing index object from memory back to disk using an atomic file lock.","group":"index","sig":"git_index *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"file":"index.h","argline":"git_index *index","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"comments":"","line":125},"git_tag_target":{"lineto":85,"rawComments":"\n Get the tagged object of a tag\n @param tag a previously loaded tag.\n @return reference to a repository object\n\n","description":"Get the tagged object of a tag @param tag a previously loaded tag.","group":"tag","sig":"git_tag *","return":{"type":"const git_object *","comment":"reference to a repository object"},"file":"tag.h","argline":"git_tag *t","args":[{"type":"git_tag *","comment":"","name":"t"}],"comments":"","line":80},"git_revwalk_push":{"lineto":91,"rawComments":"\n Mark a commit to start traversal from.\n The commit object must belong to the repo which is being walked through.\n\n @param walker the walker being used for the traversal.\n @param commit the commit to start from.\n\n","description":"Mark a commit to start traversal from. The commit object must belong to the repo which is being walked through.","group":"revwalk","sig":"git_revwalk *::git_commit *","return":{"type":"int","comment":""},"file":"revwalk.h","argline":"git_revwalk *walk, git_commit *commit","args":[{"type":"git_revwalk *","comment":"","name":"walk"},{"type":"git_commit *","comment":"the commit to start from.","name":"commit"}],"comments":"@param walker the walker being used for the traversal.","line":84},"git_blob_lookup":{"lineto":55,"rawComments":"\n Lookup a blob object from a repository.\n The generated blob object is owned by the revision\n repo and shall not be freed by the user.\n\n @param blob pointer to the looked up blob\n @param repo the repo to use when locating the blob.\n @param id identity of the blob to locate.\n @return 0 on success; error code otherwise\n\n","description":"Lookup a blob object from a repository. The generated blob object is owned by the revision repo and shall not be freed by the user.","group":"blob","sig":"git_blob **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"blob.h","argline":"git_blob **blob, git_repository *repo, const git_oid *id","args":[{"type":"git_blob **","comment":"pointer to the looked up blob","name":"blob"},{"type":"git_repository *","comment":"the repo to use when locating the blob.","name":"repo"},{"type":"const git_oid *","comment":"identity of the blob to locate.","name":"id"}],"comments":"","line":42},"git_tree_entry_set_id":{"lineto":196,"rawComments":"\n Change the SHA1 id of a tree entry.\n\n This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param entry Entry object which will be modified\n @param oid new SHA1 oid for the entry\n\n","description":"Change the SHA1 id of a tree entry.","group":"tree","sig":"git_tree_entry *::const git_oid *","return":{"type":"void","comment":""},"file":"tree.h","argline":"git_tree_entry *entry, const git_oid *oid","args":[{"type":"git_tree_entry *","comment":"Entry object which will be modified","name":"entry"},{"type":"const git_oid *","comment":"new SHA1 oid for the entry","name":"oid"}],"comments":"This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()","line":187},"git_odb_new":{"lineto":52,"rawComments":"\n Create a new object database with no backends.\n\n Before the ODB can be used for read/writing, a custom database\n backend must be manually added using `git_odb_add_backend()`\n\n @param out location to store the database pointer, if opened.\n            Set to NULL if the open failed.\n @return GIT_SUCCESS if the database was created; otherwise an error\n         code describing why the open was not possible.\n\n","description":"Create a new object database with no backends.","group":"odb","sig":"git_odb **","return":{"type":"int","comment":"GIT_SUCCESS if the database was created; otherwise an error          code describing why the open was not possible."},"file":"odb.h","argline":"git_odb **out","args":[{"type":"git_odb **","comment":"location to store the database pointer, if opened.             Set to NULL if the open failed.","name":"out"}],"comments":"Before the ODB can be used for read/writing, a custom database\n backend must be manually added using `git_odb_add_backend()`","line":41},"git_commit_tree":{"lineto":128,"rawComments":"\n Get the tree pointed to by a commit.\n @param commit a previously loaded commit.\n @return the tree of a commit\n\n","description":"Get the tree pointed to by a commit.","group":"commit","sig":"git_commit *","return":{"type":"const git_tree *","comment":"the tree of a commit"},"file":"commit.h","argline":"git_commit *commit","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"comments":"","line":123},"git_oid_allocfmt":{"lineto":101,"rawComments":"\n Format a gid_oid into a newly allocated c-string.\n @param oid the oid structure to format\n @return the c-string; NULL if memory is exhausted.  Caller must\n         deallocate the string with free().\n\n","description":"Format a gid_oid into a newly allocated c-string.","group":"oid","sig":"const git_oid *","return":{"type":"char *","comment":"the c-string; NULL if memory is exhausted.  Caller must          deallocate the string with free()."},"file":"oid.h","argline":"const git_oid *oid","args":[{"type":"const git_oid *","comment":"the oid structure to format","name":"oid"}],"comments":"","line":95},"git_tag_tagger":{"lineto":106,"rawComments":"\n Get the tagger (author) of a tag\n @param tag a previously loaded tag.\n @return reference to the tag's author\n\n","description":"Get the tagger (author) of a tag @param tag a previously loaded tag.","group":"tag","sig":"git_tag *","return":{"type":"const git_signature *","comment":"reference to the tag's author"},"file":"tag.h","argline":"git_tag *t","args":[{"type":"git_tag *","comment":"","name":"t"}],"comments":"","line":101},"git_tree_remove_entry_byindex":{"lineto":163,"rawComments":"\n Remove an entry by its index.\n\n Index must be >= 0 and < than git_tree_entrycount().\n\n This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()\n\n @param tree Tree where to remove the entry\n @param idx index of the entry\n @return 0 on successful removal; GIT_ENOTFOUND if the entry wasn't found\n\n","description":"Remove an entry by its index.","group":"tree","sig":"git_tree *::int","return":{"type":"int","comment":"0 on successful removal; GIT_ENOTFOUND if the entry wasn't found"},"file":"tree.h","argline":"git_tree *tree, int idx","args":[{"type":"git_tree *","comment":"Tree where to remove the entry","name":"tree"},{"type":"int","comment":"index of the entry","name":"idx"}],"comments":"Index must be >= 0 and < than git_tree_entrycount().\n\n This will mark the tree as modified; the modified entry will\n be written back to disk on the next git_object_write()","line":151},"git_reference_lookup":{"lineto":52,"rawComments":"\n Lookup a reference by its name in a repository.\n\n The generated reference is owned by the repository and\n should not be freed by the user.\n\n @param reference_out pointer to the looked-up reference\n @param repo the repository to look up the reference\n @param name the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)\n @return 0 on success; error code otherwise\n\n","description":"Lookup a reference by its name in a repository.","group":"reference","sig":"git_reference **::git_repository *::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"refs.h","argline":"git_reference **reference_out, git_repository *repo, const char *name","args":[{"type":"git_reference **","comment":"pointer to the looked-up reference","name":"reference_out"},{"type":"git_repository *","comment":"the repository to look up the reference","name":"repo"},{"type":"const char *","comment":"the long name for the reference (e.g. HEAD, ref/heads/master, refs/tags/v0.1.0, ...)","name":"name"}],"comments":"The generated reference is owned by the repository and\n should not be freed by the user.","line":41},"git_commit_committer":{"lineto":114,"rawComments":"\n Get the committer of a commit.\n @param commit a previously loaded commit.\n @return the committer of a commit\n\n","description":"Get the committer of a commit.","group":"commit","sig":"git_commit *","return":{"type":"const git_signature *","comment":"the committer of a commit"},"file":"commit.h","argline":"git_commit *commit","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"comments":"","line":109},"git_reference_resolve":{"lineto":139,"rawComments":"\n Resolve a symbolic reference\n\n Thie method iteratively peels a symbolic reference\n until it resolves to a direct reference to an OID.\n\n If a direct reference is passed as an argument,\n that reference is returned immediately\n\n @param resolved_ref Pointer to the peeled reference\n @param ref The reference\n @return 0 on success; error code otherwise\n\n","description":"Resolve a symbolic reference","group":"reference","sig":"git_reference **::git_reference *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"refs.h","argline":"git_reference **resolved_ref, git_reference *ref","args":[{"type":"git_reference **","comment":"Pointer to the peeled reference","name":"resolved_ref"},{"type":"git_reference *","comment":"The reference","name":"ref"}],"comments":"Thie method iteratively peels a symbolic reference\n until it resolves to a direct reference to an OID.\n\n If a direct reference is passed as an argument,\n that reference is returned immediately","line":126},"git_tag_set_name":{"lineto":127,"rawComments":"\n Set the name of a tag\n @param tag The tag to modify\n @param name the new name for the tag\n\n","description":"Set the name of a tag","group":"tag","sig":"git_tag *::const char *","return":{"type":"void","comment":""},"file":"tag.h","argline":"git_tag *tag, const char *name","args":[{"type":"git_tag *","comment":"The tag to modify","name":"tag"},{"type":"const char *","comment":"the new name for the tag","name":"name"}],"comments":"","line":122},"git_reference_name":{"lineto":124,"rawComments":"\n Get the full name of a reference\n\n @param ref The reference\n @return the full name for the ref\n\n","description":"Get the full name of a reference","group":"reference","sig":"git_reference *","return":{"type":"const char *","comment":"the full name for the ref"},"file":"refs.h","argline":"git_reference *ref","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"comments":"","line":118},"git_odb_exists":{"lineto":168,"rawComments":"\n Determine if the given object can be found in the object database.\n\n @param db database to be searched for the given object.\n @param id the object to search for.\n @return\n - true, if the object was found\n - false, otherwise\n\n","description":"Determine if the given object can be found in the object database.","group":"odb","sig":"git_odb *::const git_oid *","return":{"type":"int","comment":""},"file":"odb.h","argline":"git_odb *db, const git_oid *id","args":[{"type":"git_odb *","comment":"database to be searched for the given object.","name":"db"},{"type":"const git_oid *","comment":"the object to search for.","name":"id"}],"comments":"@return\n - true, if the object was found\n - false, otherwise","line":159},"git_tag_message":{"lineto":113,"rawComments":"\n Get the message of a tag\n @param tag a previously loaded tag.\n @return message of the tag\n\n","description":"Get the message of a tag @param tag a previously loaded tag.","group":"tag","sig":"git_tag *","return":{"type":"const char *","comment":"message of the tag"},"file":"tag.h","argline":"git_tag *t","args":[{"type":"git_tag *","comment":"","name":"t"}],"comments":"","line":108},"git_reference_owner":{"lineto":147,"rawComments":"\n Get the repository where a reference resides\n\n @param ref The reference\n @return a pointer to the repo\n\n","description":"Get the repository where a reference resides","group":"reference","sig":"git_reference *","return":{"type":"git_repository *","comment":"a pointer to the repo"},"file":"refs.h","argline":"git_reference *ref","args":[{"type":"git_reference *","comment":"The reference","name":"ref"}],"comments":"","line":141},"git_reference_packall":{"lineto":219,"rawComments":"\n Pack all the loose references in the repository\n\n This method will load into the cache all the loose\n references on the repository and update the\n `packed-refs` file with them.\n\n Once the `packed-refs` file has been written properly,\n the loose references will be removed from disk.\n\n WARNING: calling this method may invalidate any existing\n references previously loaded on the cache.\n\n @param repo Repository where the loose refs will be packed\n @return 0 on success; error code otherwise\n\n","description":"Pack all the loose references in the repository","group":"reference","sig":"git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"refs.h","argline":"git_repository *repo","args":[{"type":"git_repository *","comment":"Repository where the loose refs will be packed","name":"repo"}],"comments":"This method will load into the cache all the loose\n references on the repository and update the\n `packed-refs` file with them.\n\n Once the `packed-refs` file has been written properly,\n the loose references will be removed from disk.\n\n WARNING: calling this method may invalidate any existing\n references previously loaded on the cache.","line":203},"git_strerror":{"lineto":41,"rawComments":"\n strerror() for the Git library\n @param num The error code to explain\n @return a string explaining the error code\n\n","description":"strerror() for the Git library","group":"errors","sig":"int","return":{"type":"const char *","comment":"a string explaining the error code"},"file":"errors.h","argline":"int num","args":[{"type":"int","comment":"The error code to explain","name":"num"}],"comments":"","line":36},"git_blob_writefile":{"lineto":124,"rawComments":"\n Read a file from the working folder of a repository\n and write it to the Object Database as a loose blob,\n if such doesn't exist yet.\n\n @param written_id return the id of the written blob\n @param repo repository where the blob will be written\n @param path file from which the blob will be created\n\n","description":"Read a file from the working folder of a repository and write it to the Object Database as a loose blob, if such doesn't exist yet.","group":"blob","sig":"git_oid *::git_repository *::const char *","return":{"type":"int","comment":""},"file":"blob.h","argline":"git_oid *written_id, git_repository *repo, const char *path","args":[{"type":"git_oid *","comment":"return the id of the written blob","name":"written_id"},{"type":"git_repository *","comment":"repository where the blob will be written","name":"repo"},{"type":"const char *","comment":"file from which the blob will be created","name":"path"}],"comments":"","line":115},"git_oid_pathfmt":{"lineto":93,"rawComments":"\n Format a git_oid into a loose-object path string.\n <p>\n The resulting string is \"aa/...\", where \"aa\" is the first two\n hex digitis of the oid and \"...\" is the remaining 38 digits.\n\n @param str output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (41 bytes).  Only the\n        oid digits are written; a '\\\\0' terminator must be added\n        by the caller if it is required.\n @param oid oid structure to format.\n\n","description":"Format a git_oid into a loose-object path string. <p> The resulting string is \"aa/...\", where \"aa\" is the first two hex digitis of the oid and \"...\" is the remaining 38 digits.","group":"oid","sig":"char *::const git_oid *","return":{"type":"void","comment":""},"file":"oid.h","argline":"char *str, const git_oid *oid","args":[{"type":"char *","comment":"output hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (41 bytes).  Only the         oid digits are written; a '\\\\0' terminator must be added         by the caller if it is required.","name":"str"},{"type":"const git_oid *","comment":"oid structure to format.","name":"oid"}],"comments":"","line":80},"git_index_remove":{"lineto":161,"rawComments":"\n Remove an entry from the index\n\n @param index an existing index object\n @param position position of the entry to remove\n @return 0 on success, otherwise an error code\n\n","description":"Remove an entry from the index","group":"index","sig":"git_index *::int","return":{"type":"int","comment":"0 on success, otherwise an error code"},"file":"index.h","argline":"git_index *index, int position","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"int","comment":"position of the entry to remove","name":"position"}],"comments":"","line":154},"git_blob_rawsize":{"lineto":113,"rawComments":"\n Get the size in bytes of the contents of a blob\n\n @param blob pointer to the blob\n @return size on bytes\n\n","description":"Get the size in bytes of the contents of a blob","group":"blob","sig":"git_blob *","return":{"type":"int","comment":"size on bytes"},"file":"blob.h","argline":"git_blob *blob","args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"}],"comments":"","line":107},"git_revwalk_sorting":{"lineto":117,"rawComments":"\n Change the sorting mode when iterating through the\n repository's contents.\n Changing the sorting mode resets the walker.\n @param walk the walker being used for the traversal.\n @param sort_mode combination of GIT_RPSORT_XXX flags\n\n","description":"Change the sorting mode when iterating through the repository's contents. Changing the sorting mode resets the walker.","group":"revwalk","sig":"git_revwalk *::unsigned int","return":{"type":"int","comment":""},"file":"revwalk.h","argline":"git_revwalk *walk, unsigned int sort_mode","args":[{"type":"git_revwalk *","comment":"the walker being used for the traversal.","name":"walk"},{"type":"unsigned int","comment":"combination of GIT_RPSORT_XXX flags","name":"sort_mode"}],"comments":"","line":110},"git_odb_backend_pack":{"lineto":68,"rawComments":" An instance for a custom backend ","description":"An instance for a custom backend","group":"odb","sig":"git_odb_backend **::const char *","return":{"type":"int","comment":""},"file":"odb_backend.h","argline":"git_odb_backend **backend_out, const char *objects_dir","args":[{"type":"git_odb_backend **","comment":"","name":"backend_out"},{"type":"const char *","comment":"","name":"objects_dir"}],"comments":"","line":42},"git_tree_entry_set_name":{"lineto":207,"rawComments":"\n Change the filename of a tree entry.\n\n This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param entry Entry object which will be modified\n @param oid new filename for the entry\n\n","description":"Change the filename of a tree entry.","group":"tree","sig":"git_tree_entry *::const char *","return":{"type":"void","comment":""},"file":"tree.h","argline":"git_tree_entry *entry, const char *name","args":[{"type":"git_tree_entry *","comment":"Entry object which will be modified","name":"entry"},{"type":"const char *","comment":"","name":"name"}],"comments":"This will mark the tree that contains the entry as modified;\n the modified entry will be written back to disk on the next git_object_write()\n\n @param oid new filename for the entry","line":198},"git_tree_entry_byindex":{"lineto":102,"rawComments":"\n Lookup a tree entry by its position in the tree\n @param tree a previously loaded tree.\n @param idx the position in the entry list\n @return the tree entry; NULL if not found\n\n","description":"Lookup a tree entry by its position in the tree","group":"tree","sig":"git_tree *::int","return":{"type":"git_tree_entry *","comment":"the tree entry; NULL if not found"},"file":"tree.h","argline":"git_tree *tree, int idx","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"},{"type":"int","comment":"the position in the entry list","name":"idx"}],"comments":"","line":96},"git_commit_parent":{"lineto":144,"rawComments":"\n Get the specified parent of the commit.\n @param commit a previously loaded commit.\n @param n the position of the entry\n @return a pointer to the commit; NULL if out of bounds\n\n","description":"Get the specified parent of the commit.","group":"commit","sig":"git_commit *::unsigned int","return":{"type":"git_commit *","comment":"a pointer to the commit; NULL if out of bounds"},"file":"commit.h","argline":"git_commit *commit, unsigned int n","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"},{"type":"unsigned int","comment":"the position of the entry","name":"n"}],"comments":"","line":138},"git_tag_lookup":{"lineto":55,"rawComments":"\n Lookup a tag object from the repository.\n The generated tag object is owned by the revision\n repo and shall not be freed by the user.\n\n @param tag pointer to the looked up tag\n @param repo the repo to use when locating the tag.\n @param id identity of the tag to locate.\n @return 0 on success; error code otherwise\n\n","description":"Lookup a tag object from the repository. The generated tag object is owned by the revision repo and shall not be freed by the user.","group":"tag","sig":"git_tag **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"tag.h","argline":"git_tag **tag, git_repository *repo, const git_oid *id","args":[{"type":"git_tag **","comment":"pointer to the looked up tag","name":"tag"},{"type":"git_repository *","comment":"the repo to use when locating the tag.","name":"repo"},{"type":"const git_oid *","comment":"identity of the tag to locate.","name":"id"}],"comments":"","line":42},"git_commit_id":{"lineto":79,"rawComments":"\n Get the id of a commit.\n @param commit a previously loaded commit.\n @return object identity for the commit.\n\n","description":"Get the id of a commit.","group":"commit","sig":"git_commit *","return":{"type":"const git_oid *","comment":"object identity for the commit."},"file":"commit.h","argline":"git_commit *commit","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"comments":"","line":74},"git_commit_set_author":{"lineto":173,"rawComments":"\n Set the author of a commit\n @param commit the commit object\n @param author_sig signature of the author\n\n","description":"Set the author of a commit","group":"commit","sig":"git_commit *::const git_signature *","return":{"type":"void","comment":""},"file":"commit.h","argline":"git_commit *commit, const git_signature *author_sig","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"const git_signature *","comment":"signature of the author","name":"author_sig"}],"comments":"","line":168},"git_tree_id":{"lineto":78,"rawComments":"\n Get the id of a tree.\n @param tree a previously loaded tree.\n @return object identity for the tree.\n\n","description":"Get the id of a tree.","group":"tree","sig":"git_tree *","return":{"type":"const git_oid *","comment":"object identity for the tree."},"file":"tree.h","argline":"git_tree *tree","args":[{"type":"git_tree *","comment":"a previously loaded tree.","name":"tree"}],"comments":"","line":73},"git_index_find":{"lineto":142,"rawComments":"\n Find the first index of any entires which point to given\n path in the Git index.\n\n @param index an existing index object\n @param path path to search\n @return an index >= 0 if found, -1 otherwise\n\n","description":"Find the first index of any entires which point to given path in the Git index.","group":"index","sig":"git_index *::const char *","return":{"type":"int","comment":"an index >= 0 if found, -1 otherwise"},"file":"index.h","argline":"git_index *index, const char *path","args":[{"type":"git_index *","comment":"an existing index object","name":"index"},{"type":"const char *","comment":"path to search","name":"path"}],"comments":"","line":134},"git_odb_backend_loose":{"lineto":69,"rawComments":"","description":"","group":"odb","sig":"git_odb_backend **::const char *","return":{"type":"int","comment":""},"file":"odb_backend.h","argline":"git_odb_backend **backend_out, const char *objects_dir","args":[{"type":"git_odb_backend **","comment":"","name":"backend_out"},{"type":"const char *","comment":"","name":"objects_dir"}],"comments":"","line":69},"git_odb_read_header":{"lineto":145,"rawComments":"\n Read the header of an object from the database, without\n reading its full contents.\n\n Only the 'type' and 'len' fields of the git_rawobj structure\n are filled. The 'data' pointer will always be NULL.\n\n The raw object pointed by 'out' doesn't need to be manually\n closed with git_rawobj_close().\n\n @param out object descriptor to populate upon reading.\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n\n","description":"Read the header of an object from the database, without reading its full contents.","group":"odb","sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":""},"file":"odb.h","argline":"git_rawobj *out, git_odb *db, const git_oid *id","args":[{"type":"git_rawobj *","comment":"object descriptor to populate upon reading.","name":"out"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}],"comments":"Only the 'type' and 'len' fields of the git_rawobj structure\n are filled. The 'data' pointer will always be NULL.\n\n The raw object pointed by 'out' doesn't need to be manually\n closed with git_rawobj_close().\n\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.","line":128},"git_repository_open":{"lineto":64,"rawComments":"\n Open a git repository.\n\n The 'path' argument must point to an existing git repository\n folder, e.g.\n\n\t\t/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD\n\n\t\t/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD\n\n\tThe method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither.\n\n @param repository pointer to the repo which will be opened\n @param path the path to the repository\n @return 0 on success; error code otherwise\n\n","description":"Open a git repository.","group":"repository","sig":"git_repository **::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"repository.h","argline":"git_repository **repository, const char *path","args":[{"type":"git_repository **","comment":"pointer to the repo which will be opened","name":"repository"},{"type":"const char *","comment":"the path to the repository","name":"path"}],"comments":"The 'path' argument must point to an existing git repository\n folder, e.g.\n\n\t\t/path/to/my_repo/.git/\t(normal repository)\n\t\t\t\t\t\t\tobjects/\n\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\tHEAD\n\n\t\t/path/to/bare_repo/\t\t(bare repository)\n\t\t\t\t\t\tobjects/\n\t\t\t\t\t\tindex\n\t\t\t\t\t\tHEAD\n\n\tThe method will automatically detect if 'path' is a normal\n\tor bare repository or fail is 'path' is neither.","line":41},"git_index_read":{"lineto":123,"rawComments":"\n Update the contents of an existing index object in memory\n by reading from the hard disk.\n\n @param index an existing index object\n @return 0 on success, otherwise an error code\n\n","description":"Update the contents of an existing index object in memory by reading from the hard disk.","group":"index","sig":"git_index *","return":{"type":"int","comment":"0 on success, otherwise an error code"},"file":"index.h","argline":"git_index *index","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"comments":"","line":116},"git_signature_free":{"lineto":66,"rawComments":"\n Free an existing signature\n\n @sig signature to free\n\n","description":"Free an existing signature","group":"signature","sig":"git_signature *","return":{"type":"void","comment":""},"file":"signature.h","argline":"git_signature *sig","args":[{"type":"git_signature *","comment":"","name":"sig"}],"comments":"@sig signature to free","line":61},"git_commit_author":{"lineto":121,"rawComments":"\n Get the author of a commit.\n @param commit a previously loaded commit.\n @return the author of a commit\n\n","description":"Get the author of a commit.","group":"commit","sig":"git_commit *","return":{"type":"const git_signature *","comment":"the author of a commit"},"file":"commit.h","argline":"git_commit *commit","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"comments":"","line":116},"git_odb_write":{"lineto":157,"rawComments":"\n Write an object to the database.\n\n @param id identity of the object written.\n @param db database to which the object should be written.\n @param obj object descriptor for the object to write.\n @return\n - GIT_SUCCESS if the object was written;\n - GIT_ERROR otherwise.\n\n","description":"Write an object to the database.","group":"odb","sig":"git_oid *::git_odb *::git_rawobj *","return":{"type":"int","comment":""},"file":"odb.h","argline":"git_oid *id, git_odb *db, git_rawobj *obj","args":[{"type":"git_oid *","comment":"identity of the object written.","name":"id"},{"type":"git_odb *","comment":"database to which the object should be written.","name":"db"},{"type":"git_rawobj *","comment":"object descriptor for the object to write.","name":"obj"}],"comments":"@return\n - GIT_SUCCESS if the object was written;\n - GIT_ERROR otherwise.","line":147},"git_commit_set_message":{"lineto":159,"rawComments":"\n Set the message of a commit\n @param commit the commit object\n @param message the new message\n\n","description":"Set the message of a commit","group":"commit","sig":"git_commit *::const char *","return":{"type":"void","comment":""},"file":"commit.h","argline":"git_commit *commit, const char *message","args":[{"type":"git_commit *","comment":"the commit object","name":"commit"},{"type":"const char *","comment":"the new message","name":"message"}],"comments":"","line":154},"git_commit_new":{"lineto":72,"rawComments":"\n Create a new in-memory git_commit.\n\n The commit object must be manually filled using\n setter methods before it can be written to its\n repository.\n\n @param commit pointer to the new commit\n @param repo The repository where the object will reside\n @return 0 on success; error code otherwise\n\n","description":"Create a new in-memory git_commit.","group":"commit","sig":"git_commit **::git_repository *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"commit.h","argline":"git_commit **commit, git_repository *repo","args":[{"type":"git_commit **","comment":"pointer to the new commit","name":"commit"},{"type":"git_repository *","comment":"The repository where the object will reside","name":"repo"}],"comments":"The commit object must be manually filled using\n setter methods before it can be written to its\n repository.","line":58},"git_odb_read":{"lineto":126,"rawComments":"\n Read an object from the database.\n\n If GIT_ENOTFOUND then out->data is set to NULL.\n\n @param out object descriptor to populate upon reading.\n @param db database to search for the object in.\n @param id identity of the object to read.\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.\n\n","description":"Read an object from the database.","group":"odb","sig":"git_rawobj *::git_odb *::const git_oid *","return":{"type":"int","comment":""},"file":"odb.h","argline":"git_rawobj *out, git_odb *db, const git_oid *id","args":[{"type":"git_rawobj *","comment":"object descriptor to populate upon reading.","name":"out"},{"type":"git_odb *","comment":"database to search for the object in.","name":"db"},{"type":"const git_oid *","comment":"identity of the object to read.","name":"id"}],"comments":"If GIT_ENOTFOUND then out->data is set to NULL.\n\n @return\n - GIT_SUCCESS if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.","line":114},"git_tag_type":{"lineto":92,"rawComments":"\n Get the type of a tag's tagged object\n @param tag a previously loaded tag.\n @return type of the tagged object\n\n","description":"Get the type of a tag's tagged object @param tag a previously loaded tag.","group":"tag","sig":"git_tag *","return":{"type":"git_otype","comment":"type of the tagged object"},"file":"tag.h","argline":"git_tag *t","args":[{"type":"git_tag *","comment":"","name":"t"}],"comments":"","line":87},"git_blob_set_rawcontent":{"lineto":92,"rawComments":"\n Fill a blob with the contents inside\n the pointed buffer\n\n @param blob pointer to the blob\n @param buffer buffer with the contents for the blob\n @param len size of the buffer\n @return 0 on success; error code otherwise\n\n","description":"Fill a blob with the contents inside the pointed buffer","group":"blob","sig":"git_blob *::const void *::size_t","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"blob.h","argline":"git_blob *blob, const void *buffer, size_t len","args":[{"type":"git_blob *","comment":"pointer to the blob","name":"blob"},{"type":"const void *","comment":"buffer with the contents for the blob","name":"buffer"},{"type":"size_t","comment":"size of the buffer","name":"len"}],"comments":"","line":83},"git_reference_set_oid":{"lineto":177,"rawComments":"\n Set the OID target of a reference.\n\n The reference must be a direct reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.\n\n @param ref The reference\n @param target The new target OID for the reference\n @return 0 on success; error code otherwise\n\n","description":"Set the OID target of a reference.","group":"reference","sig":"git_reference *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"refs.h","argline":"git_reference *ref, const git_oid *id","args":[{"type":"git_reference *","comment":"The reference","name":"ref"},{"type":"const git_oid *","comment":"","name":"id"}],"comments":"The reference must be a direct reference, otherwise\n this method will fail.\n\n The reference will be automatically updated in\n memory and on disk.\n\n @param target The new target OID for the reference","line":164},"git_index_open_bare":{"lineto":88,"rawComments":"\n Create a new Git index object as a memory representation\n of the Git index file in 'index_path', without a repository\n to back it.\n\n Since there is no ODB behind this index, any Index methods\n which rely on the ODB (e.g. index_add) will fail with the\n GIT_EBAREINDEX error code.\n\n @param index the pointer for the new index\n @param index_path the path to the index file in disk\n @return 0 on success; error code otherwise\n\n","description":"Create a new Git index object as a memory representation of the Git index file in 'index_path', without a repository to back it.","group":"index","sig":"git_index **::const char *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"index.h","argline":"git_index **index, const char *index_path","args":[{"type":"git_index **","comment":"the pointer for the new index","name":"index"},{"type":"const char *","comment":"the path to the index file in disk","name":"index_path"}],"comments":"Since there is no ODB behind this index, any Index methods\n which rely on the ODB (e.g. index_add) will fail with the\n GIT_EBAREINDEX error code.","line":75},"git_object_new":{"lineto":81,"rawComments":"\n Create a new in-memory repository object with\n the given type.\n\n The object's attributes can be filled in using the\n corresponding setter methods.\n\n The object will be written back to given git_repository\n when the git_object_write() function is called; objects\n cannot be written to disk until all their main\n attributes have been properly filled.\n\n Objects are instantiated with no SHA1 id; their id\n will be automatically generated when writing to the\n repository.\n\n @param object pointer to the new object\n @parem repo Repository where the object belongs\n @param type Type of the object to be created\n @return the new object\n\n","description":"Create a new in-memory repository object with the given type.","group":"object","sig":"git_object **::git_repository *::git_otype","return":{"type":"int","comment":"the new object"},"file":"object.h","argline":"git_object **object, git_repository *repo, git_otype type","args":[{"type":"git_object **","comment":"pointer to the new object","name":"object"},{"type":"git_repository *","comment":"","name":"repo"},{"type":"git_otype","comment":"Type of the object to be created","name":"type"}],"comments":"The object's attributes can be filled in using the\n corresponding setter methods.\n\n The object will be written back to given git_repository\n when the git_object_write() function is called; objects\n cannot be written to disk until all their main\n attributes have been properly filled.\n\n Objects are instantiated with no SHA1 id; their id\n will be automatically generated when writing to the\n repository.\n\n @parem repo Repository where the object belongs","line":60},"git_tree_entry_name":{"lineto":116,"rawComments":"\n Get the filename of a tree entry\n @param entry a tree entry\n @return the name of the file\n\n","description":"Get the filename of a tree entry","group":"tree","sig":"git_tree_entry *","return":{"type":"const char *","comment":"the name of the file"},"file":"tree.h","argline":"git_tree_entry *entry","args":[{"type":"git_tree_entry *","comment":"a tree entry","name":"entry"}],"comments":"","line":111},"git_object__size":{"lineto":193,"rawComments":"\n Get the size in bytes for the structure which\n acts as an in-memory representation of any given\n object type.\n\n For all the core types, this would the equivalent\n of calling `sizeof(git_commit)` if the core types\n were not opaque on the external API.\n\n @param type object type to get its size\n @return size in bytes of the object\n\n","description":"Get the size in bytes for the structure which acts as an in-memory representation of any given object type.","group":"object","sig":"git_otype","return":{"type":"size_t","comment":"size in bytes of the object"},"file":"object.h","argline":"git_otype type","args":[{"type":"git_otype","comment":"object type to get its size","name":"type"}],"comments":"For all the core types, this would the equivalent\n of calling `sizeof(git_commit)` if the core types\n were not opaque on the external API.","line":181},"git_commit_lookup":{"lineto":56,"rawComments":"\n Lookup a commit object from a repository.\n The generated commit object is owned by the revision\n repo and shall not be freed by the user.\n\n @param commit pointer to the looked up commit\n @param repo the repo to use when locating the commit.\n @param id identity of the commit to locate.  If the object is\n        an annotated tag it will be peeled back to the commit.\n @return 0 on success; error code otherwise\n\n","description":"Lookup a commit object from a repository. The generated commit object is owned by the revision repo and shall not be freed by the user.","group":"commit","sig":"git_commit **::git_repository *::const git_oid *","return":{"type":"int","comment":"0 on success; error code otherwise"},"file":"commit.h","argline":"git_commit **commit, git_repository *repo, const git_oid *id","args":[{"type":"git_commit **","comment":"pointer to the looked up commit","name":"commit"},{"type":"git_repository *","comment":"the repo to use when locating the commit.","name":"repo"},{"type":"const git_oid *","comment":"identity of the commit to locate.  If the object is         an annotated tag it will be peeled back to the commit.","name":"id"}],"comments":"","line":42},"git_object_owner":{"lineto":128,"rawComments":"\n Get the repository that owns this object\n\n @param obj the object\n @return the repository who owns this object\n\n","description":"Get the repository that owns this object","group":"object","sig":"const git_object *","return":{"type":"git_repository *","comment":"the repository who owns this object"},"file":"object.h","argline":"const git_object *obj","args":[{"type":"const git_object *","comment":"the object","name":"obj"}],"comments":"","line":122},"git_oid_fmt":{"lineto":78,"rawComments":"\n Format a git_oid into a hex string.\n @param str output hex string; must be pointing at the start of\n        the hex sequence and have at least the number of bytes\n        needed for an oid encoded in hex (40 bytes).  Only the\n        oid digits are written; a '\\\\0' terminator must be added\n        by the caller if it is required.\n @param oid oid structure to format.\n\n","description":"Format a git_oid into a hex string.","group":"oid","sig":"char *::const git_oid *","return":{"type":"void","comment":""},"file":"oid.h","argline":"char *str, const git_oid *oid","args":[{"type":"char *","comment":"output hex string; must be pointing at the start of         the hex sequence and have at least the number of bytes         needed for an oid encoded in hex (40 bytes).  Only the         oid digits are written; a '\\\\0' terminator must be added         by the caller if it is required.","name":"str"},{"type":"const git_oid *","comment":"oid structure to format.","name":"oid"}],"comments":"","line":69},"git_commit_message_short":{"lineto":86,"rawComments":"\n Get the short (one line) message of a commit.\n @param commit a previously loaded commit.\n @return the short message of a commit\n\n","description":"Get the short (one line) message of a commit.","group":"commit","sig":"git_commit *","return":{"type":"const char *","comment":"the short message of a commit"},"file":"commit.h","argline":"git_commit *commit","args":[{"type":"git_commit *","comment":"a previously loaded commit.","name":"commit"}],"comments":"","line":81},"git_reference_delete":{"lineto":201,"rawComments":"\n Delete an existing reference\n\n This method works for both direct and symbolic references.\n\n The reference will be immediately removed on disk and from\n memory. The given reference pointer will no longer be valid.\n\n\n","description":"Delete an existing reference","group":"reference","sig":"git_reference *","return":{"type":"int","comment":""},"file":"refs.h","argline":"git_reference *ref","args":[{"type":"git_reference *","comment":"","name":"ref"}],"comments":"This method works for both direct and symbolic references.\n\n The reference will be immediately removed on disk and from\n memory. The given reference pointer will no longer be valid.","line":192},"git_oid_to_string":{"lineto":118,"rawComments":"\n Format a git_oid into a buffer as a hex format c-string.\n <p>\n If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting\n oid c-string will be truncated to n-1 characters. If there are\n any input parameter errors (out == NULL, n == 0, oid == NULL),\n then a pointer to an empty string is returned, so that the return\n value can always be printed.\n\n @param out the buffer into which the oid string is output.\n @param n the size of the out buffer.\n @param oid the oid structure to format.\n @return the out buffer pointer, assuming no input parameter\n         errors, otherwise a pointer to an empty string.\n\n","description":"Format a git_oid into a buffer as a hex format c-string. <p> If the buffer is smaller than GIT_OID_HEXSZ+1, then the resulting oid c-string will be truncated to n-1 characters. If there are any input parameter errors (out == NULL, n == 0, oid == NULL), then a pointer to an empty string is returned, so that the return value can always be printed.","group":"oid","sig":"char *::size_t::const git_oid *","return":{"type":"char *","comment":"the out buffer pointer, assuming no input parameter          errors, otherwise a pointer to an empty string."},"file":"oid.h","argline":"char *out, size_t n, const git_oid *oid","args":[{"type":"char *","comment":"the buffer into which the oid string is output.","name":"out"},{"type":"size_t","comment":"the size of the out buffer.","name":"n"},{"type":"const git_oid *","comment":"the oid structure to format.","name":"oid"}],"comments":"","line":103},"git_index_entrycount":{"lineto":194,"rawComments":"\n Get the count of entries currently in the index\n\n @param index an existing index object\n @return integer of count of current entries\n\n","description":"Get the count of entries currently in the index","group":"index","sig":"git_index *","return":{"type":"unsigned int","comment":"integer of count of current entries"},"file":"index.h","argline":"git_index *index","args":[{"type":"git_index *","comment":"an existing index object","name":"index"}],"comments":"","line":188},"git_oid_mkraw":{"lineto":67,"rawComments":"\n Copy an already raw oid into a git_oid structure.\n @param out oid structure the result is written into.\n @param raw the raw input bytes to be copied.\n\n","description":"Copy an already raw oid into a git_oid structure.","group":"oid","sig":"git_oid *::const unsigned char *","return":{"type":"void","comment":""},"file":"oid.h","argline":"git_oid *out, const unsigned char *raw","args":[{"type":"git_oid *","comment":"oid structure the result is written into.","name":"out"},{"type":"const unsigned char *","comment":"the raw input bytes to be copied.","name":"raw"}],"comments":"","line":62},"git_reference_rename":{"lineto":190,"rawComments":"\n Rename an existing reference\n\n This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.\n\n The refernece will be immediately renamed in-memory\n and on disk.\n\n\n","description":"Rename an existing reference","group":"reference","sig":"git_reference *::const char *","return":{"type":"int","comment":""},"file":"refs.h","argline":"git_reference *ref, const char *new_name","args":[{"type":"git_reference *","comment":"","name":"ref"},{"type":"const char *","comment":"","name":"new_name"}],"comments":"This method works for both direct and symbolic references.\n The new name will be checked for validity and may be\n modified into a normalized form.\n\n The refernece will be immediately renamed in-memory\n and on disk.","line":179},"git_revwalk_reset":{"lineto":82,"rawComments":"\n Reset the walking machinery for reuse.\n @param walker handle to reset.\n\n","description":"Reset the walking machinery for reuse.","group":"revwalk","sig":"git_revwalk *","return":{"type":"void","comment":""},"file":"revwalk.h","argline":"git_revwalk *walker","args":[{"type":"git_revwalk *","comment":"handle to reset.","name":"walker"}],"comments":"","line":78},"git_object_close":{"lineto":151,"rawComments":"\n Close an open object\n\n This method instructs the library to close an existing\n object; note that git_objects are owned by the repository\n and are reference counted, so the object may or may not be\n freed after this library call, depending on whether any other\n objects still depend on it.\n\n IMPORTANT:\n It is *not* necessary to call this method when you stop using\n an object, since all object memory is automatically reclaimed\n by the repository when it is freed.\n\n Forgetting to call `git_object_close` does not cause memory\n leaks, but it's is recommended to close as soon as possible\n the biggest objects (e.g. blobs) to prevent wasting memory\n space.\n\n @param object the object to close\n\n","description":"Close an open object","group":"object","sig":"git_object *","return":{"type":"void","comment":""},"file":"object.h","argline":"git_object *object","args":[{"type":"git_object *","comment":"the object to close","name":"object"}],"comments":"This method instructs the library to close an existing\n object; note that git_objects are owned by the repository\n and are reference counted, so the object may or may not be\n freed after this library call, depending on whether any other\n objects still depend on it.\n\n IMPORTANT:\n It is *not* necessary to call this method when you stop using\n an object, since all object memory is automatically reclaimed\n by the repository when it is freed.\n\n Forgetting to call `git_object_close` does not cause memory\n leaks, but it's is recommended to close as soon as possible\n the biggest objects (e.g. blobs) to prevent wasting memory\n space.","line":130}},"files":[{"lines":128,"file":"blob.h","meta":{"brief":"Git blob load and write routines","defgroup":"git_blob Git blob load and write routines","file":"git2/blob.h","ingroup":"Git"},"functions":["git_blob_lookup","git_blob_new","git_blob_set_rawcontent_fromfile","git_blob_set_rawcontent","git_blob_rawcontent","git_blob_rawsize","git_blob_writefile"]},{"lines":184,"file":"commit.h","meta":{"brief":"Git commit parsing, formatting routines","defgroup":"git_commit Git commit parsing, formatting routines","file":"git2/commit.h","ingroup":"Git"},"functions":["git_commit_lookup","git_commit_new","git_commit_id","git_commit_message_short","git_commit_message","git_commit_time","git_commit_time_offset","git_commit_committer","git_commit_author","git_commit_tree","git_commit_parentcount","git_commit_parent","git_commit_add_parent","git_commit_set_message","git_commit_set_committer","git_commit_set_author","git_commit_set_tree"]},{"lines":163,"file":"common.h","meta":{"brief":"Git common platform definitions","defgroup":"git_common Git common platform definitions","file":"git2/common.h","ingroup":"Git"},"functions":["__attribute__","__attribute__"]},{"lines":45,"file":"errors.h","meta":{"brief":"Git error handling routines and variables","defgroup":null,"file":"git2/errors.h","ingroup":"Git"},"functions":["git_strerror"]},{"lines":199,"file":"index.h","meta":{"brief":"Git index parsing and manipulation routines","defgroup":"git_index Git index parsing and manipulation routines","file":"git2/index.h","ingroup":"Git"},"functions":["git_index_open_bare","git_index_open_inrepo","git_index_clear","git_index_free","git_index_read","git_index_write","git_index_find","git_index_add","git_index_remove","git_index_insert","git_index_get","git_index_entrycount"]},{"lines":198,"file":"object.h","meta":{"brief":"Git revision object management routines","defgroup":"git_object Git revision object management routines","file":"git2/object.h","ingroup":"Git"},"functions":["git_object_lookup","git_object_new","git_object_write","git_object_id","git_object_type","git_object_owner","git_object_close","git_object_typeisloose","git_object__size"]},{"lines":201,"file":"odb.h","meta":{"brief":"Git object database routines","defgroup":"git_odb Git object database routines","file":"git2/odb.h","ingroup":"Git"},"functions":["git_odb_new","git_odb_open","git_odb_add_backend","git_odb_add_alternate","git_odb_close","git_odb_read","git_odb_read_header","git_odb_write","git_odb_exists","git_rawobj_hash","git_rawobj_close"]},{"lines":77,"file":"odb_backend.h","meta":{"brief":"Git custom backend functions","defgroup":"git_backend Git custom backend API","file":"git2/backend.h","ingroup":"Git"},"functions":["git_odb_backend_pack","git_odb_backend_loose","git_odb_backend_sqlite"]},{"lines":137,"file":"oid.h","meta":{"brief":"Git object id routines","defgroup":"git_oid Git object id routines","file":"git2/oid.h","ingroup":"Git"},"functions":["git_oid_mkstr","git_oid_mkraw","git_oid_fmt","git_oid_pathfmt","git_oid_allocfmt","git_oid_to_string","git_oid_cpy","git_oid_cmp"]},{"lines":223,"file":"refs.h","meta":{"brief":"Git reference management routines","defgroup":"git_reference Git reference management routines","file":"git2/refs.h","ingroup":"Git"},"functions":["git_reference_lookup","git_reference_create_symbolic","git_reference_create_oid","git_reference_oid","git_reference_target","git_reference_type","git_reference_name","git_reference_resolve","git_reference_owner","git_reference_set_target","git_reference_set_oid","git_reference_rename","git_reference_delete","git_reference_packall"]},{"lines":183,"file":"repository.h","meta":{"brief":"Git repository management routines","defgroup":"git_repository Git repository management routines","file":"git2/repository.h","ingroup":"Git"},"functions":["git_repository_open","git_repository_database","git_repository_index","git_repository_free","git_repository_init"]},{"lines":136,"file":"revwalk.h","meta":{"brief":"Git revision traversal routines","defgroup":"git_revwalk Git revision traversal routines","file":"git2/revwalk.h","ingroup":"Git"},"functions":["git_revwalk_new","git_revwalk_reset","git_revwalk_push","git_revwalk_hide","git_revwalk_next","git_revwalk_sorting","git_revwalk_free","git_revwalk_repository"]},{"lines":70,"file":"signature.h","meta":{"brief":"Git signature creation","defgroup":"git_signature Git signature creation","file":"git2/signature.h","ingroup":"Git"},"functions":["git_signature_new","git_signature_dup","git_signature_free"]},{"lines":145,"file":"tag.h","meta":{"brief":"Git tag parsing routines","defgroup":"git_tag Git tag management","file":"git2/tag.h","ingroup":"Git"},"functions":["git_tag_lookup","git_tag_new","git_tag_id","git_tag_target","git_tag_type","git_tag_name","git_tag_tagger","git_tag_message","git_tag_set_target","git_tag_set_name","git_tag_set_tagger","git_tag_set_message"]},{"lines":80,"file":"thread-utils.h","meta":{"brief":null,"defgroup":null,"file":null,"ingroup":null},"functions":[]},{"lines":222,"file":"tree.h","meta":{"brief":"Git tree parsing, loading routines","defgroup":"git_tree Git tree parsing, loading routines","file":"git2/tree.h","ingroup":"Git"},"functions":["git_tree_lookup","git_tree_new","git_tree_id","git_tree_entrycount","git_tree_entry_byname","git_tree_entry_byindex","git_tree_entry_attributes","git_tree_entry_name","git_tree_entry_id","git_tree_add_entry","git_tree_remove_entry_byindex","git_tree_remove_entry_byname","git_tree_clear_entries","git_tree_entry_set_id","git_tree_entry_set_name","git_tree_entry_set_attributes"]},{"lines":153,"file":"types.h","meta":{"brief":"libgit2 base & compatibility types","defgroup":null,"file":"git2/types.h","ingroup":"Git"},"functions":[]},{"lines":58,"file":"zlib.h","meta":{"brief":"Git data compression routines","defgroup":"git_zlib Git data compression routines","file":"git2/zlib.h","ingroup":"Git"},"functions":[]}]}